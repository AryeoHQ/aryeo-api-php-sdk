<?php
/**
 * AppointmentsApi
 * PHP version 7.3
 *
 * @category Class
 * @package  Aryeo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Aryeo
 *
 * Contact: jarrod@aryeo.com
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aryeo\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Aryeo\ApiException;
use Aryeo\Configuration;
use Aryeo\HeaderSelector;
use Aryeo\ObjectSerializer;

/**
 * AppointmentsApi Class Doc Comment
 *
 * @category Class
 * @package  Aryeo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AppointmentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getAppointments
     *
     * List all appointments.
     *
     * @param  string $include Comma separated list of optional data to include in the response. (optional)
     * @param  string $filter_tense Return appointments that are upcoming or in the past. (optional)
     * @param  \DateTime $filter_start_at_gte Return appointments where the start_at field is greater than or equal to this value. Effectively, appointments that start after this date. (optional)
     * @param  \DateTime $filter_start_at_lte Return appointments where the start_at field is less than or equal to this value. Effectively, appointments that start before this date. (optional)
     * @param  array $filter_user_ids The IDs of users whose appointments will be retrieved. UUID Version 4. (optional)
     * @param  string $sort Comma separated list of fields used for sorting. Placing a minus symbol in front of a field name sorts in descending order. Defaults to &#x60;-start_at&#x60;. (optional)
     * @param  string $per_page The number of items per page. Defaults to 25. (optional)
     * @param  string $page The requested page. Defaults to 1. (optional)
     *
     * @throws \Aryeo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aryeo\Model\AppointmentCollection|\Aryeo\Model\ApiError403|\Aryeo\Model\ApiError404|\Aryeo\Model\ApiFail422|\Aryeo\Model\ApiError500
     */
    public function getAppointments($include = null, $filter_tense = null, $filter_start_at_gte = null, $filter_start_at_lte = null, $filter_user_ids = null, $sort = null, $per_page = null, $page = null)
    {
        list($response) = $this->getAppointmentsWithHttpInfo($include, $filter_tense, $filter_start_at_gte, $filter_start_at_lte, $filter_user_ids, $sort, $per_page, $page);
        return $response;
    }

    /**
     * Operation getAppointmentsWithHttpInfo
     *
     * List all appointments.
     *
     * @param  string $include Comma separated list of optional data to include in the response. (optional)
     * @param  string $filter_tense Return appointments that are upcoming or in the past. (optional)
     * @param  \DateTime $filter_start_at_gte Return appointments where the start_at field is greater than or equal to this value. Effectively, appointments that start after this date. (optional)
     * @param  \DateTime $filter_start_at_lte Return appointments where the start_at field is less than or equal to this value. Effectively, appointments that start before this date. (optional)
     * @param  array $filter_user_ids The IDs of users whose appointments will be retrieved. UUID Version 4. (optional)
     * @param  string $sort Comma separated list of fields used for sorting. Placing a minus symbol in front of a field name sorts in descending order. Defaults to &#x60;-start_at&#x60;. (optional)
     * @param  string $per_page The number of items per page. Defaults to 25. (optional)
     * @param  string $page The requested page. Defaults to 1. (optional)
     *
     * @throws \Aryeo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aryeo\Model\AppointmentCollection|\Aryeo\Model\ApiError403|\Aryeo\Model\ApiError404|\Aryeo\Model\ApiFail422|\Aryeo\Model\ApiError500, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAppointmentsWithHttpInfo($include = null, $filter_tense = null, $filter_start_at_gte = null, $filter_start_at_lte = null, $filter_user_ids = null, $sort = null, $per_page = null, $page = null)
    {
        $request = $this->getAppointmentsRequest($include, $filter_tense, $filter_start_at_gte, $filter_start_at_lte, $filter_user_ids, $sort, $per_page, $page);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aryeo\Model\AppointmentCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aryeo\Model\AppointmentCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Aryeo\Model\ApiError403' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aryeo\Model\ApiError403', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aryeo\Model\ApiError404' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aryeo\Model\ApiError404', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Aryeo\Model\ApiFail422' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aryeo\Model\ApiFail422', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Aryeo\Model\ApiError500' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aryeo\Model\ApiError500', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aryeo\Model\AppointmentCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aryeo\Model\AppointmentCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aryeo\Model\ApiError403',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aryeo\Model\ApiError404',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aryeo\Model\ApiFail422',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aryeo\Model\ApiError500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAppointmentsAsync
     *
     * List all appointments.
     *
     * @param  string $include Comma separated list of optional data to include in the response. (optional)
     * @param  string $filter_tense Return appointments that are upcoming or in the past. (optional)
     * @param  \DateTime $filter_start_at_gte Return appointments where the start_at field is greater than or equal to this value. Effectively, appointments that start after this date. (optional)
     * @param  \DateTime $filter_start_at_lte Return appointments where the start_at field is less than or equal to this value. Effectively, appointments that start before this date. (optional)
     * @param  array $filter_user_ids The IDs of users whose appointments will be retrieved. UUID Version 4. (optional)
     * @param  string $sort Comma separated list of fields used for sorting. Placing a minus symbol in front of a field name sorts in descending order. Defaults to &#x60;-start_at&#x60;. (optional)
     * @param  string $per_page The number of items per page. Defaults to 25. (optional)
     * @param  string $page The requested page. Defaults to 1. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAppointmentsAsync($include = null, $filter_tense = null, $filter_start_at_gte = null, $filter_start_at_lte = null, $filter_user_ids = null, $sort = null, $per_page = null, $page = null)
    {
        return $this->getAppointmentsAsyncWithHttpInfo($include, $filter_tense, $filter_start_at_gte, $filter_start_at_lte, $filter_user_ids, $sort, $per_page, $page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAppointmentsAsyncWithHttpInfo
     *
     * List all appointments.
     *
     * @param  string $include Comma separated list of optional data to include in the response. (optional)
     * @param  string $filter_tense Return appointments that are upcoming or in the past. (optional)
     * @param  \DateTime $filter_start_at_gte Return appointments where the start_at field is greater than or equal to this value. Effectively, appointments that start after this date. (optional)
     * @param  \DateTime $filter_start_at_lte Return appointments where the start_at field is less than or equal to this value. Effectively, appointments that start before this date. (optional)
     * @param  array $filter_user_ids The IDs of users whose appointments will be retrieved. UUID Version 4. (optional)
     * @param  string $sort Comma separated list of fields used for sorting. Placing a minus symbol in front of a field name sorts in descending order. Defaults to &#x60;-start_at&#x60;. (optional)
     * @param  string $per_page The number of items per page. Defaults to 25. (optional)
     * @param  string $page The requested page. Defaults to 1. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAppointmentsAsyncWithHttpInfo($include = null, $filter_tense = null, $filter_start_at_gte = null, $filter_start_at_lte = null, $filter_user_ids = null, $sort = null, $per_page = null, $page = null)
    {
        $returnType = '\Aryeo\Model\AppointmentCollection';
        $request = $this->getAppointmentsRequest($include, $filter_tense, $filter_start_at_gte, $filter_start_at_lte, $filter_user_ids, $sort, $per_page, $page);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAppointments'
     *
     * @param  string $include Comma separated list of optional data to include in the response. (optional)
     * @param  string $filter_tense Return appointments that are upcoming or in the past. (optional)
     * @param  \DateTime $filter_start_at_gte Return appointments where the start_at field is greater than or equal to this value. Effectively, appointments that start after this date. (optional)
     * @param  \DateTime $filter_start_at_lte Return appointments where the start_at field is less than or equal to this value. Effectively, appointments that start before this date. (optional)
     * @param  array $filter_user_ids The IDs of users whose appointments will be retrieved. UUID Version 4. (optional)
     * @param  string $sort Comma separated list of fields used for sorting. Placing a minus symbol in front of a field name sorts in descending order. Defaults to &#x60;-start_at&#x60;. (optional)
     * @param  string $per_page The number of items per page. Defaults to 25. (optional)
     * @param  string $page The requested page. Defaults to 1. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAppointmentsRequest($include = null, $filter_tense = null, $filter_start_at_gte = null, $filter_start_at_lte = null, $filter_user_ids = null, $sort = null, $per_page = null, $page = null)
    {
        if ($include !== null && strlen($include) > 255) {
            throw new \InvalidArgumentException('invalid length for "$include" when calling AppointmentsApi.getAppointments, must be smaller than or equal to 255.');
        }
        if ($include !== null && strlen($include) < 0) {
            throw new \InvalidArgumentException('invalid length for "$include" when calling AppointmentsApi.getAppointments, must be bigger than or equal to 0.');
        }

        if ($filter_tense !== null && strlen($filter_tense) > 100) {
            throw new \InvalidArgumentException('invalid length for "$filter_tense" when calling AppointmentsApi.getAppointments, must be smaller than or equal to 100.');
        }
        if ($filter_tense !== null && strlen($filter_tense) < 1) {
            throw new \InvalidArgumentException('invalid length for "$filter_tense" when calling AppointmentsApi.getAppointments, must be bigger than or equal to 1.');
        }

        if ($filter_start_at_gte !== null && strlen($filter_start_at_gte) > 100) {
            throw new \InvalidArgumentException('invalid length for "$filter_start_at_gte" when calling AppointmentsApi.getAppointments, must be smaller than or equal to 100.');
        }
        if ($filter_start_at_gte !== null && strlen($filter_start_at_gte) < 1) {
            throw new \InvalidArgumentException('invalid length for "$filter_start_at_gte" when calling AppointmentsApi.getAppointments, must be bigger than or equal to 1.');
        }

        if ($filter_start_at_lte !== null && strlen($filter_start_at_lte) > 100) {
            throw new \InvalidArgumentException('invalid length for "$filter_start_at_lte" when calling AppointmentsApi.getAppointments, must be smaller than or equal to 100.');
        }
        if ($filter_start_at_lte !== null && strlen($filter_start_at_lte) < 1) {
            throw new \InvalidArgumentException('invalid length for "$filter_start_at_lte" when calling AppointmentsApi.getAppointments, must be bigger than or equal to 1.');
        }

        if ($filter_user_ids !== null && strlen($filter_user_ids) > 36) {
            throw new \InvalidArgumentException('invalid length for "$filter_user_ids" when calling AppointmentsApi.getAppointments, must be smaller than or equal to 36.');
        }
        if ($filter_user_ids !== null && strlen($filter_user_ids) < 36) {
            throw new \InvalidArgumentException('invalid length for "$filter_user_ids" when calling AppointmentsApi.getAppointments, must be bigger than or equal to 36.');
        }

        if ($sort !== null && strlen($sort) > 100) {
            throw new \InvalidArgumentException('invalid length for "$sort" when calling AppointmentsApi.getAppointments, must be smaller than or equal to 100.');
        }
        if ($sort !== null && strlen($sort) < 1) {
            throw new \InvalidArgumentException('invalid length for "$sort" when calling AppointmentsApi.getAppointments, must be bigger than or equal to 1.');
        }

        if ($per_page !== null && strlen($per_page) > 5) {
            throw new \InvalidArgumentException('invalid length for "$per_page" when calling AppointmentsApi.getAppointments, must be smaller than or equal to 5.');
        }
        if ($per_page !== null && strlen($per_page) < 1) {
            throw new \InvalidArgumentException('invalid length for "$per_page" when calling AppointmentsApi.getAppointments, must be bigger than or equal to 1.');
        }

        if ($page !== null && strlen($page) > 5) {
            throw new \InvalidArgumentException('invalid length for "$page" when calling AppointmentsApi.getAppointments, must be smaller than or equal to 5.');
        }
        if ($page !== null && strlen($page) < 1) {
            throw new \InvalidArgumentException('invalid length for "$page" when calling AppointmentsApi.getAppointments, must be bigger than or equal to 1.');
        }


        $resourcePath = '/appointments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include !== null) {
            if('form' === 'form' && is_array($include)) {
                foreach($include as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['include'] = $include;
            }
        }
        // query params
        if ($filter_tense !== null) {
            if('form' === 'form' && is_array($filter_tense)) {
                foreach($filter_tense as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[tense]'] = $filter_tense;
            }
        }
        // query params
        if ($filter_start_at_gte !== null) {
            if('form' === 'form' && is_array($filter_start_at_gte)) {
                foreach($filter_start_at_gte as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[start_at_gte]'] = $filter_start_at_gte;
            }
        }
        // query params
        if ($filter_start_at_lte !== null) {
            if('form' === 'form' && is_array($filter_start_at_lte)) {
                foreach($filter_start_at_lte as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[start_at_lte]'] = $filter_start_at_lte;
            }
        }
        // query params
        if ($filter_user_ids !== null) {
            if('form' === 'form' && is_array($filter_user_ids)) {
                foreach($filter_user_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[user_ids]'] = $filter_user_ids;
            }
        }
        // query params
        if ($sort !== null) {
            if('form' === 'form' && is_array($sort)) {
                foreach($sort as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort'] = $sort;
            }
        }
        // query params
        if ($per_page !== null) {
            if('form' === 'form' && is_array($per_page)) {
                foreach($per_page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['per_page'] = $per_page;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUnconfirmedAppointments
     *
     * List all unconfirmed appointments.
     *
     * @param  string $include Comma separated list of optional data to include in the response. (optional)
     * @param  array $filter_user_ids The IDs of users whose appointments will be retrieved. UUID Version 4. (optional)
     * @param  string $sort Comma separated list of fields used for sorting. Placing a minus symbol in front of a field name sorts in descending order. Defaults to &#x60;-start_at&#x60;. (optional)
     * @param  string $per_page The number of items per page. Defaults to 25. (optional)
     * @param  string $page The requested page. Defaults to 1. (optional)
     *
     * @throws \Aryeo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aryeo\Model\UnconfirmedAppointmentCollection|\Aryeo\Model\ApiError403|\Aryeo\Model\ApiError404|\Aryeo\Model\ApiFail422|\Aryeo\Model\ApiError500
     */
    public function getUnconfirmedAppointments($include = null, $filter_user_ids = null, $sort = null, $per_page = null, $page = null)
    {
        list($response) = $this->getUnconfirmedAppointmentsWithHttpInfo($include, $filter_user_ids, $sort, $per_page, $page);
        return $response;
    }

    /**
     * Operation getUnconfirmedAppointmentsWithHttpInfo
     *
     * List all unconfirmed appointments.
     *
     * @param  string $include Comma separated list of optional data to include in the response. (optional)
     * @param  array $filter_user_ids The IDs of users whose appointments will be retrieved. UUID Version 4. (optional)
     * @param  string $sort Comma separated list of fields used for sorting. Placing a minus symbol in front of a field name sorts in descending order. Defaults to &#x60;-start_at&#x60;. (optional)
     * @param  string $per_page The number of items per page. Defaults to 25. (optional)
     * @param  string $page The requested page. Defaults to 1. (optional)
     *
     * @throws \Aryeo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aryeo\Model\UnconfirmedAppointmentCollection|\Aryeo\Model\ApiError403|\Aryeo\Model\ApiError404|\Aryeo\Model\ApiFail422|\Aryeo\Model\ApiError500, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUnconfirmedAppointmentsWithHttpInfo($include = null, $filter_user_ids = null, $sort = null, $per_page = null, $page = null)
    {
        $request = $this->getUnconfirmedAppointmentsRequest($include, $filter_user_ids, $sort, $per_page, $page);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aryeo\Model\UnconfirmedAppointmentCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aryeo\Model\UnconfirmedAppointmentCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Aryeo\Model\ApiError403' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aryeo\Model\ApiError403', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aryeo\Model\ApiError404' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aryeo\Model\ApiError404', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Aryeo\Model\ApiFail422' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aryeo\Model\ApiFail422', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Aryeo\Model\ApiError500' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aryeo\Model\ApiError500', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aryeo\Model\UnconfirmedAppointmentCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aryeo\Model\UnconfirmedAppointmentCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aryeo\Model\ApiError403',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aryeo\Model\ApiError404',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aryeo\Model\ApiFail422',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aryeo\Model\ApiError500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUnconfirmedAppointmentsAsync
     *
     * List all unconfirmed appointments.
     *
     * @param  string $include Comma separated list of optional data to include in the response. (optional)
     * @param  array $filter_user_ids The IDs of users whose appointments will be retrieved. UUID Version 4. (optional)
     * @param  string $sort Comma separated list of fields used for sorting. Placing a minus symbol in front of a field name sorts in descending order. Defaults to &#x60;-start_at&#x60;. (optional)
     * @param  string $per_page The number of items per page. Defaults to 25. (optional)
     * @param  string $page The requested page. Defaults to 1. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUnconfirmedAppointmentsAsync($include = null, $filter_user_ids = null, $sort = null, $per_page = null, $page = null)
    {
        return $this->getUnconfirmedAppointmentsAsyncWithHttpInfo($include, $filter_user_ids, $sort, $per_page, $page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUnconfirmedAppointmentsAsyncWithHttpInfo
     *
     * List all unconfirmed appointments.
     *
     * @param  string $include Comma separated list of optional data to include in the response. (optional)
     * @param  array $filter_user_ids The IDs of users whose appointments will be retrieved. UUID Version 4. (optional)
     * @param  string $sort Comma separated list of fields used for sorting. Placing a minus symbol in front of a field name sorts in descending order. Defaults to &#x60;-start_at&#x60;. (optional)
     * @param  string $per_page The number of items per page. Defaults to 25. (optional)
     * @param  string $page The requested page. Defaults to 1. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUnconfirmedAppointmentsAsyncWithHttpInfo($include = null, $filter_user_ids = null, $sort = null, $per_page = null, $page = null)
    {
        $returnType = '\Aryeo\Model\UnconfirmedAppointmentCollection';
        $request = $this->getUnconfirmedAppointmentsRequest($include, $filter_user_ids, $sort, $per_page, $page);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUnconfirmedAppointments'
     *
     * @param  string $include Comma separated list of optional data to include in the response. (optional)
     * @param  array $filter_user_ids The IDs of users whose appointments will be retrieved. UUID Version 4. (optional)
     * @param  string $sort Comma separated list of fields used for sorting. Placing a minus symbol in front of a field name sorts in descending order. Defaults to &#x60;-start_at&#x60;. (optional)
     * @param  string $per_page The number of items per page. Defaults to 25. (optional)
     * @param  string $page The requested page. Defaults to 1. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUnconfirmedAppointmentsRequest($include = null, $filter_user_ids = null, $sort = null, $per_page = null, $page = null)
    {
        if ($include !== null && strlen($include) > 255) {
            throw new \InvalidArgumentException('invalid length for "$include" when calling AppointmentsApi.getUnconfirmedAppointments, must be smaller than or equal to 255.');
        }
        if ($include !== null && strlen($include) < 0) {
            throw new \InvalidArgumentException('invalid length for "$include" when calling AppointmentsApi.getUnconfirmedAppointments, must be bigger than or equal to 0.');
        }

        if ($filter_user_ids !== null && strlen($filter_user_ids) > 36) {
            throw new \InvalidArgumentException('invalid length for "$filter_user_ids" when calling AppointmentsApi.getUnconfirmedAppointments, must be smaller than or equal to 36.');
        }
        if ($filter_user_ids !== null && strlen($filter_user_ids) < 36) {
            throw new \InvalidArgumentException('invalid length for "$filter_user_ids" when calling AppointmentsApi.getUnconfirmedAppointments, must be bigger than or equal to 36.');
        }

        if ($sort !== null && strlen($sort) > 100) {
            throw new \InvalidArgumentException('invalid length for "$sort" when calling AppointmentsApi.getUnconfirmedAppointments, must be smaller than or equal to 100.');
        }
        if ($sort !== null && strlen($sort) < 1) {
            throw new \InvalidArgumentException('invalid length for "$sort" when calling AppointmentsApi.getUnconfirmedAppointments, must be bigger than or equal to 1.');
        }

        if ($per_page !== null && strlen($per_page) > 5) {
            throw new \InvalidArgumentException('invalid length for "$per_page" when calling AppointmentsApi.getUnconfirmedAppointments, must be smaller than or equal to 5.');
        }
        if ($per_page !== null && strlen($per_page) < 1) {
            throw new \InvalidArgumentException('invalid length for "$per_page" when calling AppointmentsApi.getUnconfirmedAppointments, must be bigger than or equal to 1.');
        }

        if ($page !== null && strlen($page) > 5) {
            throw new \InvalidArgumentException('invalid length for "$page" when calling AppointmentsApi.getUnconfirmedAppointments, must be smaller than or equal to 5.');
        }
        if ($page !== null && strlen($page) < 1) {
            throw new \InvalidArgumentException('invalid length for "$page" when calling AppointmentsApi.getUnconfirmedAppointments, must be bigger than or equal to 1.');
        }


        $resourcePath = '/unconfirmed-appointments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include !== null) {
            if('form' === 'form' && is_array($include)) {
                foreach($include as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['include'] = $include;
            }
        }
        // query params
        if ($filter_user_ids !== null) {
            if('form' === 'form' && is_array($filter_user_ids)) {
                foreach($filter_user_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[user_ids]'] = $filter_user_ids;
            }
        }
        // query params
        if ($sort !== null) {
            if('form' === 'form' && is_array($sort)) {
                foreach($sort as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort'] = $sort;
            }
        }
        // query params
        if ($per_page !== null) {
            if('form' === 'form' && is_array($per_page)) {
                foreach($per_page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['per_page'] = $per_page;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putAppointmentsAppointmentIdCancel
     *
     * Cancel an appointment.
     *
     * @param  string $appointment_id The ID of an appointment. (required)
     * @param  \Aryeo\Model\AppointmentCancelPutPayload $appointment_cancel_put_payload appointment_cancel_put_payload (optional)
     *
     * @throws \Aryeo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aryeo\Model\AppointmentResource|\Aryeo\Model\ApiError403|\Aryeo\Model\ApiError404|\Aryeo\Model\ApiError409|\Aryeo\Model\ApiFail422|\Aryeo\Model\ApiError500
     */
    public function putAppointmentsAppointmentIdCancel($appointment_id, $appointment_cancel_put_payload = null)
    {
        list($response) = $this->putAppointmentsAppointmentIdCancelWithHttpInfo($appointment_id, $appointment_cancel_put_payload);
        return $response;
    }

    /**
     * Operation putAppointmentsAppointmentIdCancelWithHttpInfo
     *
     * Cancel an appointment.
     *
     * @param  string $appointment_id The ID of an appointment. (required)
     * @param  \Aryeo\Model\AppointmentCancelPutPayload $appointment_cancel_put_payload (optional)
     *
     * @throws \Aryeo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aryeo\Model\AppointmentResource|\Aryeo\Model\ApiError403|\Aryeo\Model\ApiError404|\Aryeo\Model\ApiError409|\Aryeo\Model\ApiFail422|\Aryeo\Model\ApiError500, HTTP status code, HTTP response headers (array of strings)
     */
    public function putAppointmentsAppointmentIdCancelWithHttpInfo($appointment_id, $appointment_cancel_put_payload = null)
    {
        $request = $this->putAppointmentsAppointmentIdCancelRequest($appointment_id, $appointment_cancel_put_payload);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aryeo\Model\AppointmentResource' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aryeo\Model\AppointmentResource', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Aryeo\Model\ApiError403' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aryeo\Model\ApiError403', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aryeo\Model\ApiError404' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aryeo\Model\ApiError404', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Aryeo\Model\ApiError409' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aryeo\Model\ApiError409', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Aryeo\Model\ApiFail422' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aryeo\Model\ApiFail422', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Aryeo\Model\ApiError500' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aryeo\Model\ApiError500', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aryeo\Model\AppointmentResource';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aryeo\Model\AppointmentResource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aryeo\Model\ApiError403',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aryeo\Model\ApiError404',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aryeo\Model\ApiError409',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aryeo\Model\ApiFail422',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aryeo\Model\ApiError500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putAppointmentsAppointmentIdCancelAsync
     *
     * Cancel an appointment.
     *
     * @param  string $appointment_id The ID of an appointment. (required)
     * @param  \Aryeo\Model\AppointmentCancelPutPayload $appointment_cancel_put_payload (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putAppointmentsAppointmentIdCancelAsync($appointment_id, $appointment_cancel_put_payload = null)
    {
        return $this->putAppointmentsAppointmentIdCancelAsyncWithHttpInfo($appointment_id, $appointment_cancel_put_payload)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putAppointmentsAppointmentIdCancelAsyncWithHttpInfo
     *
     * Cancel an appointment.
     *
     * @param  string $appointment_id The ID of an appointment. (required)
     * @param  \Aryeo\Model\AppointmentCancelPutPayload $appointment_cancel_put_payload (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putAppointmentsAppointmentIdCancelAsyncWithHttpInfo($appointment_id, $appointment_cancel_put_payload = null)
    {
        $returnType = '\Aryeo\Model\AppointmentResource';
        $request = $this->putAppointmentsAppointmentIdCancelRequest($appointment_id, $appointment_cancel_put_payload);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putAppointmentsAppointmentIdCancel'
     *
     * @param  string $appointment_id The ID of an appointment. (required)
     * @param  \Aryeo\Model\AppointmentCancelPutPayload $appointment_cancel_put_payload (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putAppointmentsAppointmentIdCancelRequest($appointment_id, $appointment_cancel_put_payload = null)
    {
        // verify the required parameter 'appointment_id' is set
        if ($appointment_id === null || (is_array($appointment_id) && count($appointment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $appointment_id when calling putAppointmentsAppointmentIdCancel'
            );
        }
        if (strlen($appointment_id) > 255) {
            throw new \InvalidArgumentException('invalid length for "$appointment_id" when calling AppointmentsApi.putAppointmentsAppointmentIdCancel, must be smaller than or equal to 255.');
        }
        if (strlen($appointment_id) < 0) {
            throw new \InvalidArgumentException('invalid length for "$appointment_id" when calling AppointmentsApi.putAppointmentsAppointmentIdCancel, must be bigger than or equal to 0.');
        }


        $resourcePath = '/appointments/{appointment_id}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($appointment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'appointment_id' . '}',
                ObjectSerializer::toPathValue($appointment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($appointment_cancel_put_payload)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($appointment_cancel_put_payload));
            } else {
                $httpBody = $appointment_cancel_put_payload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putAppointmentsAppointmentIdReschedule
     *
     * Reschedule an appointment.
     *
     * @param  string $appointment_id The ID of an appointment. (required)
     * @param  \Aryeo\Model\AppointmentReschedulePutPayload $appointment_reschedule_put_payload appointment_reschedule_put_payload (optional)
     *
     * @throws \Aryeo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aryeo\Model\AppointmentResource|\Aryeo\Model\ApiError403|\Aryeo\Model\ApiError404|\Aryeo\Model\ApiError409|\Aryeo\Model\ApiFail422|\Aryeo\Model\ApiError500
     */
    public function putAppointmentsAppointmentIdReschedule($appointment_id, $appointment_reschedule_put_payload = null)
    {
        list($response) = $this->putAppointmentsAppointmentIdRescheduleWithHttpInfo($appointment_id, $appointment_reschedule_put_payload);
        return $response;
    }

    /**
     * Operation putAppointmentsAppointmentIdRescheduleWithHttpInfo
     *
     * Reschedule an appointment.
     *
     * @param  string $appointment_id The ID of an appointment. (required)
     * @param  \Aryeo\Model\AppointmentReschedulePutPayload $appointment_reschedule_put_payload (optional)
     *
     * @throws \Aryeo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aryeo\Model\AppointmentResource|\Aryeo\Model\ApiError403|\Aryeo\Model\ApiError404|\Aryeo\Model\ApiError409|\Aryeo\Model\ApiFail422|\Aryeo\Model\ApiError500, HTTP status code, HTTP response headers (array of strings)
     */
    public function putAppointmentsAppointmentIdRescheduleWithHttpInfo($appointment_id, $appointment_reschedule_put_payload = null)
    {
        $request = $this->putAppointmentsAppointmentIdRescheduleRequest($appointment_id, $appointment_reschedule_put_payload);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aryeo\Model\AppointmentResource' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aryeo\Model\AppointmentResource', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Aryeo\Model\ApiError403' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aryeo\Model\ApiError403', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aryeo\Model\ApiError404' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aryeo\Model\ApiError404', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Aryeo\Model\ApiError409' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aryeo\Model\ApiError409', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Aryeo\Model\ApiFail422' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aryeo\Model\ApiFail422', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Aryeo\Model\ApiError500' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aryeo\Model\ApiError500', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aryeo\Model\AppointmentResource';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aryeo\Model\AppointmentResource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aryeo\Model\ApiError403',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aryeo\Model\ApiError404',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aryeo\Model\ApiError409',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aryeo\Model\ApiFail422',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aryeo\Model\ApiError500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putAppointmentsAppointmentIdRescheduleAsync
     *
     * Reschedule an appointment.
     *
     * @param  string $appointment_id The ID of an appointment. (required)
     * @param  \Aryeo\Model\AppointmentReschedulePutPayload $appointment_reschedule_put_payload (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putAppointmentsAppointmentIdRescheduleAsync($appointment_id, $appointment_reschedule_put_payload = null)
    {
        return $this->putAppointmentsAppointmentIdRescheduleAsyncWithHttpInfo($appointment_id, $appointment_reschedule_put_payload)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putAppointmentsAppointmentIdRescheduleAsyncWithHttpInfo
     *
     * Reschedule an appointment.
     *
     * @param  string $appointment_id The ID of an appointment. (required)
     * @param  \Aryeo\Model\AppointmentReschedulePutPayload $appointment_reschedule_put_payload (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putAppointmentsAppointmentIdRescheduleAsyncWithHttpInfo($appointment_id, $appointment_reschedule_put_payload = null)
    {
        $returnType = '\Aryeo\Model\AppointmentResource';
        $request = $this->putAppointmentsAppointmentIdRescheduleRequest($appointment_id, $appointment_reschedule_put_payload);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putAppointmentsAppointmentIdReschedule'
     *
     * @param  string $appointment_id The ID of an appointment. (required)
     * @param  \Aryeo\Model\AppointmentReschedulePutPayload $appointment_reschedule_put_payload (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putAppointmentsAppointmentIdRescheduleRequest($appointment_id, $appointment_reschedule_put_payload = null)
    {
        // verify the required parameter 'appointment_id' is set
        if ($appointment_id === null || (is_array($appointment_id) && count($appointment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $appointment_id when calling putAppointmentsAppointmentIdReschedule'
            );
        }
        if (strlen($appointment_id) > 255) {
            throw new \InvalidArgumentException('invalid length for "$appointment_id" when calling AppointmentsApi.putAppointmentsAppointmentIdReschedule, must be smaller than or equal to 255.');
        }
        if (strlen($appointment_id) < 0) {
            throw new \InvalidArgumentException('invalid length for "$appointment_id" when calling AppointmentsApi.putAppointmentsAppointmentIdReschedule, must be bigger than or equal to 0.');
        }


        $resourcePath = '/appointments/{appointment_id}/reschedule';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($appointment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'appointment_id' . '}',
                ObjectSerializer::toPathValue($appointment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($appointment_reschedule_put_payload)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($appointment_reschedule_put_payload));
            } else {
                $httpBody = $appointment_reschedule_put_payload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
