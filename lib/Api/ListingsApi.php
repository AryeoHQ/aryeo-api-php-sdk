<?php
/**
 * ListingsApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Aryeo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Aryeo
 *
 * Contact: jarrod@aryeo.com
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aryeo\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Aryeo\ApiException;
use Aryeo\Configuration;
use Aryeo\HeaderSelector;
use Aryeo\ObjectSerializer;

/**
 * ListingsApi Class Doc Comment
 *
 * @category Class
 * @package  Aryeo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ListingsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getListings
     *
     * Get the listings available to a group.
     *
     * @param  string $include Comma separated list of optional data to include in the response. (optional)
     * @param  string $filter_search Return listings that have fields matching this term. (optional)
     * @param  string $filter_address Return listings that have an address matching this term. (optional)
     * @param  string $filter_list_agent Return listings that have a listing agent or co-listing agent matching this term. (optional)
     * @param  string $filter_status Return listings that have a certain status. (optional)
     * @param  bool $filter_active Set as true to return listings that have an active status (e.g. active statuses include &#x60;COMING_SOON&#x60;, &#x60;FOR_SALE&#x60;, &#x60;FOR_LEASE&#x60;, &#x60;PENDING_SALE&#x60;, &#x60;PENDING_LEASE&#x60;, &#x60;SOLD&#x60;, &#x60;LEASED&#x60;). (optional)
     * @param  float $filter_price_gte Return listings where the price field is greater than or equal to this value. (optional)
     * @param  float $filter_price_lte Return listings where the price field is less than or equal to this value. (optional)
     * @param  float $filter_square_feet_gte Return listings where the square feet field is greater than or equal to this value. (optional)
     * @param  float $filter_square_feet_lte Return listings where the square feet field is less than or equal to this value. (optional)
     * @param  int $filter_bedrooms_gte Return listings where the bedrooms field is greater than or equal to this value. (optional)
     * @param  int $filter_bedrooms_lte Return listings where the bedrooms field is less than or equal to this value. (optional)
     * @param  float $filter_bathrooms_gte Return listings where the bathrooms field is greater than or equal to this value. (optional)
     * @param  float $filter_bathrooms_lte Return listings where the bathrooms field is less than or equal to this value. (optional)
     * @param  string $sort Comma separated list of fields used for sorting. Placing a minus symbol in front of a field name sorts in descending order. Defaults to &#x60;-created_at&#x60;. (optional)
     * @param  string $per_page The number of items per page. Defaults to 25. (optional)
     * @param  string $page The requested page. Defaults to 1. (optional)
     *
     * @throws \Aryeo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aryeo\Model\ListingCollection|\Aryeo\Model\ApiError|\Aryeo\Model\ApiFail|\Aryeo\Model\ApiError
     */
    public function getListings($include = null, $filter_search = null, $filter_address = null, $filter_list_agent = null, $filter_status = null, $filter_active = null, $filter_price_gte = null, $filter_price_lte = null, $filter_square_feet_gte = null, $filter_square_feet_lte = null, $filter_bedrooms_gte = null, $filter_bedrooms_lte = null, $filter_bathrooms_gte = null, $filter_bathrooms_lte = null, $sort = null, $per_page = null, $page = null)
    {
        list($response) = $this->getListingsWithHttpInfo($include, $filter_search, $filter_address, $filter_list_agent, $filter_status, $filter_active, $filter_price_gte, $filter_price_lte, $filter_square_feet_gte, $filter_square_feet_lte, $filter_bedrooms_gte, $filter_bedrooms_lte, $filter_bathrooms_gte, $filter_bathrooms_lte, $sort, $per_page, $page);
        return $response;
    }

    /**
     * Operation getListingsWithHttpInfo
     *
     * Get the listings available to a group.
     *
     * @param  string $include Comma separated list of optional data to include in the response. (optional)
     * @param  string $filter_search Return listings that have fields matching this term. (optional)
     * @param  string $filter_address Return listings that have an address matching this term. (optional)
     * @param  string $filter_list_agent Return listings that have a listing agent or co-listing agent matching this term. (optional)
     * @param  string $filter_status Return listings that have a certain status. (optional)
     * @param  bool $filter_active Set as true to return listings that have an active status (e.g. active statuses include &#x60;COMING_SOON&#x60;, &#x60;FOR_SALE&#x60;, &#x60;FOR_LEASE&#x60;, &#x60;PENDING_SALE&#x60;, &#x60;PENDING_LEASE&#x60;, &#x60;SOLD&#x60;, &#x60;LEASED&#x60;). (optional)
     * @param  float $filter_price_gte Return listings where the price field is greater than or equal to this value. (optional)
     * @param  float $filter_price_lte Return listings where the price field is less than or equal to this value. (optional)
     * @param  float $filter_square_feet_gte Return listings where the square feet field is greater than or equal to this value. (optional)
     * @param  float $filter_square_feet_lte Return listings where the square feet field is less than or equal to this value. (optional)
     * @param  int $filter_bedrooms_gte Return listings where the bedrooms field is greater than or equal to this value. (optional)
     * @param  int $filter_bedrooms_lte Return listings where the bedrooms field is less than or equal to this value. (optional)
     * @param  float $filter_bathrooms_gte Return listings where the bathrooms field is greater than or equal to this value. (optional)
     * @param  float $filter_bathrooms_lte Return listings where the bathrooms field is less than or equal to this value. (optional)
     * @param  string $sort Comma separated list of fields used for sorting. Placing a minus symbol in front of a field name sorts in descending order. Defaults to &#x60;-created_at&#x60;. (optional)
     * @param  string $per_page The number of items per page. Defaults to 25. (optional)
     * @param  string $page The requested page. Defaults to 1. (optional)
     *
     * @throws \Aryeo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aryeo\Model\ListingCollection|\Aryeo\Model\ApiError|\Aryeo\Model\ApiFail|\Aryeo\Model\ApiError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getListingsWithHttpInfo($include = null, $filter_search = null, $filter_address = null, $filter_list_agent = null, $filter_status = null, $filter_active = null, $filter_price_gte = null, $filter_price_lte = null, $filter_square_feet_gte = null, $filter_square_feet_lte = null, $filter_bedrooms_gte = null, $filter_bedrooms_lte = null, $filter_bathrooms_gte = null, $filter_bathrooms_lte = null, $sort = null, $per_page = null, $page = null)
    {
        $request = $this->getListingsRequest($include, $filter_search, $filter_address, $filter_list_agent, $filter_status, $filter_active, $filter_price_gte, $filter_price_lte, $filter_square_feet_gte, $filter_square_feet_lte, $filter_bedrooms_gte, $filter_bedrooms_lte, $filter_bathrooms_gte, $filter_bathrooms_lte, $sort, $per_page, $page);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aryeo\Model\ListingCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aryeo\Model\ListingCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aryeo\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aryeo\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Aryeo\Model\ApiFail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aryeo\Model\ApiFail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Aryeo\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aryeo\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aryeo\Model\ListingCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aryeo\Model\ListingCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aryeo\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aryeo\Model\ApiFail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aryeo\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getListingsAsync
     *
     * Get the listings available to a group.
     *
     * @param  string $include Comma separated list of optional data to include in the response. (optional)
     * @param  string $filter_search Return listings that have fields matching this term. (optional)
     * @param  string $filter_address Return listings that have an address matching this term. (optional)
     * @param  string $filter_list_agent Return listings that have a listing agent or co-listing agent matching this term. (optional)
     * @param  string $filter_status Return listings that have a certain status. (optional)
     * @param  bool $filter_active Set as true to return listings that have an active status (e.g. active statuses include &#x60;COMING_SOON&#x60;, &#x60;FOR_SALE&#x60;, &#x60;FOR_LEASE&#x60;, &#x60;PENDING_SALE&#x60;, &#x60;PENDING_LEASE&#x60;, &#x60;SOLD&#x60;, &#x60;LEASED&#x60;). (optional)
     * @param  float $filter_price_gte Return listings where the price field is greater than or equal to this value. (optional)
     * @param  float $filter_price_lte Return listings where the price field is less than or equal to this value. (optional)
     * @param  float $filter_square_feet_gte Return listings where the square feet field is greater than or equal to this value. (optional)
     * @param  float $filter_square_feet_lte Return listings where the square feet field is less than or equal to this value. (optional)
     * @param  int $filter_bedrooms_gte Return listings where the bedrooms field is greater than or equal to this value. (optional)
     * @param  int $filter_bedrooms_lte Return listings where the bedrooms field is less than or equal to this value. (optional)
     * @param  float $filter_bathrooms_gte Return listings where the bathrooms field is greater than or equal to this value. (optional)
     * @param  float $filter_bathrooms_lte Return listings where the bathrooms field is less than or equal to this value. (optional)
     * @param  string $sort Comma separated list of fields used for sorting. Placing a minus symbol in front of a field name sorts in descending order. Defaults to &#x60;-created_at&#x60;. (optional)
     * @param  string $per_page The number of items per page. Defaults to 25. (optional)
     * @param  string $page The requested page. Defaults to 1. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListingsAsync($include = null, $filter_search = null, $filter_address = null, $filter_list_agent = null, $filter_status = null, $filter_active = null, $filter_price_gte = null, $filter_price_lte = null, $filter_square_feet_gte = null, $filter_square_feet_lte = null, $filter_bedrooms_gte = null, $filter_bedrooms_lte = null, $filter_bathrooms_gte = null, $filter_bathrooms_lte = null, $sort = null, $per_page = null, $page = null)
    {
        return $this->getListingsAsyncWithHttpInfo($include, $filter_search, $filter_address, $filter_list_agent, $filter_status, $filter_active, $filter_price_gte, $filter_price_lte, $filter_square_feet_gte, $filter_square_feet_lte, $filter_bedrooms_gte, $filter_bedrooms_lte, $filter_bathrooms_gte, $filter_bathrooms_lte, $sort, $per_page, $page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getListingsAsyncWithHttpInfo
     *
     * Get the listings available to a group.
     *
     * @param  string $include Comma separated list of optional data to include in the response. (optional)
     * @param  string $filter_search Return listings that have fields matching this term. (optional)
     * @param  string $filter_address Return listings that have an address matching this term. (optional)
     * @param  string $filter_list_agent Return listings that have a listing agent or co-listing agent matching this term. (optional)
     * @param  string $filter_status Return listings that have a certain status. (optional)
     * @param  bool $filter_active Set as true to return listings that have an active status (e.g. active statuses include &#x60;COMING_SOON&#x60;, &#x60;FOR_SALE&#x60;, &#x60;FOR_LEASE&#x60;, &#x60;PENDING_SALE&#x60;, &#x60;PENDING_LEASE&#x60;, &#x60;SOLD&#x60;, &#x60;LEASED&#x60;). (optional)
     * @param  float $filter_price_gte Return listings where the price field is greater than or equal to this value. (optional)
     * @param  float $filter_price_lte Return listings where the price field is less than or equal to this value. (optional)
     * @param  float $filter_square_feet_gte Return listings where the square feet field is greater than or equal to this value. (optional)
     * @param  float $filter_square_feet_lte Return listings where the square feet field is less than or equal to this value. (optional)
     * @param  int $filter_bedrooms_gte Return listings where the bedrooms field is greater than or equal to this value. (optional)
     * @param  int $filter_bedrooms_lte Return listings where the bedrooms field is less than or equal to this value. (optional)
     * @param  float $filter_bathrooms_gte Return listings where the bathrooms field is greater than or equal to this value. (optional)
     * @param  float $filter_bathrooms_lte Return listings where the bathrooms field is less than or equal to this value. (optional)
     * @param  string $sort Comma separated list of fields used for sorting. Placing a minus symbol in front of a field name sorts in descending order. Defaults to &#x60;-created_at&#x60;. (optional)
     * @param  string $per_page The number of items per page. Defaults to 25. (optional)
     * @param  string $page The requested page. Defaults to 1. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListingsAsyncWithHttpInfo($include = null, $filter_search = null, $filter_address = null, $filter_list_agent = null, $filter_status = null, $filter_active = null, $filter_price_gte = null, $filter_price_lte = null, $filter_square_feet_gte = null, $filter_square_feet_lte = null, $filter_bedrooms_gte = null, $filter_bedrooms_lte = null, $filter_bathrooms_gte = null, $filter_bathrooms_lte = null, $sort = null, $per_page = null, $page = null)
    {
        $returnType = '\Aryeo\Model\ListingCollection';
        $request = $this->getListingsRequest($include, $filter_search, $filter_address, $filter_list_agent, $filter_status, $filter_active, $filter_price_gte, $filter_price_lte, $filter_square_feet_gte, $filter_square_feet_lte, $filter_bedrooms_gte, $filter_bedrooms_lte, $filter_bathrooms_gte, $filter_bathrooms_lte, $sort, $per_page, $page);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getListings'
     *
     * @param  string $include Comma separated list of optional data to include in the response. (optional)
     * @param  string $filter_search Return listings that have fields matching this term. (optional)
     * @param  string $filter_address Return listings that have an address matching this term. (optional)
     * @param  string $filter_list_agent Return listings that have a listing agent or co-listing agent matching this term. (optional)
     * @param  string $filter_status Return listings that have a certain status. (optional)
     * @param  bool $filter_active Set as true to return listings that have an active status (e.g. active statuses include &#x60;COMING_SOON&#x60;, &#x60;FOR_SALE&#x60;, &#x60;FOR_LEASE&#x60;, &#x60;PENDING_SALE&#x60;, &#x60;PENDING_LEASE&#x60;, &#x60;SOLD&#x60;, &#x60;LEASED&#x60;). (optional)
     * @param  float $filter_price_gte Return listings where the price field is greater than or equal to this value. (optional)
     * @param  float $filter_price_lte Return listings where the price field is less than or equal to this value. (optional)
     * @param  float $filter_square_feet_gte Return listings where the square feet field is greater than or equal to this value. (optional)
     * @param  float $filter_square_feet_lte Return listings where the square feet field is less than or equal to this value. (optional)
     * @param  int $filter_bedrooms_gte Return listings where the bedrooms field is greater than or equal to this value. (optional)
     * @param  int $filter_bedrooms_lte Return listings where the bedrooms field is less than or equal to this value. (optional)
     * @param  float $filter_bathrooms_gte Return listings where the bathrooms field is greater than or equal to this value. (optional)
     * @param  float $filter_bathrooms_lte Return listings where the bathrooms field is less than or equal to this value. (optional)
     * @param  string $sort Comma separated list of fields used for sorting. Placing a minus symbol in front of a field name sorts in descending order. Defaults to &#x60;-created_at&#x60;. (optional)
     * @param  string $per_page The number of items per page. Defaults to 25. (optional)
     * @param  string $page The requested page. Defaults to 1. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getListingsRequest($include = null, $filter_search = null, $filter_address = null, $filter_list_agent = null, $filter_status = null, $filter_active = null, $filter_price_gte = null, $filter_price_lte = null, $filter_square_feet_gte = null, $filter_square_feet_lte = null, $filter_bedrooms_gte = null, $filter_bedrooms_lte = null, $filter_bathrooms_gte = null, $filter_bathrooms_lte = null, $sort = null, $per_page = null, $page = null)
    {
        if ($include !== null && strlen($include) > 255) {
            throw new \InvalidArgumentException('invalid length for "$include" when calling ListingsApi.getListings, must be smaller than or equal to 255.');
        }
        if ($include !== null && strlen($include) < 0) {
            throw new \InvalidArgumentException('invalid length for "$include" when calling ListingsApi.getListings, must be bigger than or equal to 0.');
        }

        if ($filter_search !== null && strlen($filter_search) > 255) {
            throw new \InvalidArgumentException('invalid length for "$filter_search" when calling ListingsApi.getListings, must be smaller than or equal to 255.');
        }
        if ($filter_search !== null && strlen($filter_search) < 1) {
            throw new \InvalidArgumentException('invalid length for "$filter_search" when calling ListingsApi.getListings, must be bigger than or equal to 1.');
        }

        if ($filter_address !== null && strlen($filter_address) > 255) {
            throw new \InvalidArgumentException('invalid length for "$filter_address" when calling ListingsApi.getListings, must be smaller than or equal to 255.');
        }
        if ($filter_address !== null && strlen($filter_address) < 1) {
            throw new \InvalidArgumentException('invalid length for "$filter_address" when calling ListingsApi.getListings, must be bigger than or equal to 1.');
        }

        if ($filter_list_agent !== null && strlen($filter_list_agent) > 255) {
            throw new \InvalidArgumentException('invalid length for "$filter_list_agent" when calling ListingsApi.getListings, must be smaller than or equal to 255.');
        }
        if ($filter_list_agent !== null && strlen($filter_list_agent) < 1) {
            throw new \InvalidArgumentException('invalid length for "$filter_list_agent" when calling ListingsApi.getListings, must be bigger than or equal to 1.');
        }

        if ($filter_status !== null && strlen($filter_status) > 100) {
            throw new \InvalidArgumentException('invalid length for "$filter_status" when calling ListingsApi.getListings, must be smaller than or equal to 100.');
        }
        if ($filter_status !== null && strlen($filter_status) < 1) {
            throw new \InvalidArgumentException('invalid length for "$filter_status" when calling ListingsApi.getListings, must be bigger than or equal to 1.');
        }

        if ($filter_active !== null && strlen($filter_active) > 255) {
            throw new \InvalidArgumentException('invalid length for "$filter_active" when calling ListingsApi.getListings, must be smaller than or equal to 255.');
        }
        if ($filter_active !== null && strlen($filter_active) < 0) {
            throw new \InvalidArgumentException('invalid length for "$filter_active" when calling ListingsApi.getListings, must be bigger than or equal to 0.');
        }

        if ($sort !== null && strlen($sort) > 100) {
            throw new \InvalidArgumentException('invalid length for "$sort" when calling ListingsApi.getListings, must be smaller than or equal to 100.');
        }
        if ($sort !== null && strlen($sort) < 1) {
            throw new \InvalidArgumentException('invalid length for "$sort" when calling ListingsApi.getListings, must be bigger than or equal to 1.');
        }

        if ($per_page !== null && strlen($per_page) > 5) {
            throw new \InvalidArgumentException('invalid length for "$per_page" when calling ListingsApi.getListings, must be smaller than or equal to 5.');
        }
        if ($per_page !== null && strlen($per_page) < 1) {
            throw new \InvalidArgumentException('invalid length for "$per_page" when calling ListingsApi.getListings, must be bigger than or equal to 1.');
        }

        if ($page !== null && strlen($page) > 5) {
            throw new \InvalidArgumentException('invalid length for "$page" when calling ListingsApi.getListings, must be smaller than or equal to 5.');
        }
        if ($page !== null && strlen($page) < 1) {
            throw new \InvalidArgumentException('invalid length for "$page" when calling ListingsApi.getListings, must be bigger than or equal to 1.');
        }


        $resourcePath = '/listings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include !== null) {
            if('form' === 'form' && is_array($include)) {
                foreach($include as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['include'] = $include;
            }
        }
        // query params
        if ($filter_search !== null) {
            if('form' === 'form' && is_array($filter_search)) {
                foreach($filter_search as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[search]'] = $filter_search;
            }
        }
        // query params
        if ($filter_address !== null) {
            if('form' === 'form' && is_array($filter_address)) {
                foreach($filter_address as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[address]'] = $filter_address;
            }
        }
        // query params
        if ($filter_list_agent !== null) {
            if('form' === 'form' && is_array($filter_list_agent)) {
                foreach($filter_list_agent as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[list_agent]'] = $filter_list_agent;
            }
        }
        // query params
        if ($filter_status !== null) {
            if('form' === 'form' && is_array($filter_status)) {
                foreach($filter_status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[status]'] = $filter_status;
            }
        }
        // query params
        if ($filter_active !== null) {
            if('form' === 'form' && is_array($filter_active)) {
                foreach($filter_active as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[active]'] = $filter_active;
            }
        }
        // query params
        if ($filter_price_gte !== null) {
            if('form' === 'form' && is_array($filter_price_gte)) {
                foreach($filter_price_gte as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[price_gte]'] = $filter_price_gte;
            }
        }
        // query params
        if ($filter_price_lte !== null) {
            if('form' === 'form' && is_array($filter_price_lte)) {
                foreach($filter_price_lte as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[price_lte]'] = $filter_price_lte;
            }
        }
        // query params
        if ($filter_square_feet_gte !== null) {
            if('form' === 'form' && is_array($filter_square_feet_gte)) {
                foreach($filter_square_feet_gte as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[square_feet_gte]'] = $filter_square_feet_gte;
            }
        }
        // query params
        if ($filter_square_feet_lte !== null) {
            if('form' === 'form' && is_array($filter_square_feet_lte)) {
                foreach($filter_square_feet_lte as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[square_feet_lte]'] = $filter_square_feet_lte;
            }
        }
        // query params
        if ($filter_bedrooms_gte !== null) {
            if('form' === 'form' && is_array($filter_bedrooms_gte)) {
                foreach($filter_bedrooms_gte as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[bedrooms_gte]'] = $filter_bedrooms_gte;
            }
        }
        // query params
        if ($filter_bedrooms_lte !== null) {
            if('form' === 'form' && is_array($filter_bedrooms_lte)) {
                foreach($filter_bedrooms_lte as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[bedrooms_lte]'] = $filter_bedrooms_lte;
            }
        }
        // query params
        if ($filter_bathrooms_gte !== null) {
            if('form' === 'form' && is_array($filter_bathrooms_gte)) {
                foreach($filter_bathrooms_gte as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[bathrooms_gte]'] = $filter_bathrooms_gte;
            }
        }
        // query params
        if ($filter_bathrooms_lte !== null) {
            if('form' === 'form' && is_array($filter_bathrooms_lte)) {
                foreach($filter_bathrooms_lte as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[bathrooms_lte]'] = $filter_bathrooms_lte;
            }
        }
        // query params
        if ($sort !== null) {
            if('form' === 'form' && is_array($sort)) {
                foreach($sort as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort'] = $sort;
            }
        }
        // query params
        if ($per_page !== null) {
            if('form' === 'form' && is_array($per_page)) {
                foreach($per_page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['per_page'] = $per_page;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getListingsId
     *
     * Get information about a listing.
     *
     * @param  string $listing_id The ID of a listing. (required)
     * @param  string $include Comma separated list of optional data to include in the response. (optional)
     *
     * @throws \Aryeo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aryeo\Model\ListingResource|\Aryeo\Model\ApiError|\Aryeo\Model\ApiFail|\Aryeo\Model\ApiError
     */
    public function getListingsId($listing_id, $include = null)
    {
        list($response) = $this->getListingsIdWithHttpInfo($listing_id, $include);
        return $response;
    }

    /**
     * Operation getListingsIdWithHttpInfo
     *
     * Get information about a listing.
     *
     * @param  string $listing_id The ID of a listing. (required)
     * @param  string $include Comma separated list of optional data to include in the response. (optional)
     *
     * @throws \Aryeo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aryeo\Model\ListingResource|\Aryeo\Model\ApiError|\Aryeo\Model\ApiFail|\Aryeo\Model\ApiError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getListingsIdWithHttpInfo($listing_id, $include = null)
    {
        $request = $this->getListingsIdRequest($listing_id, $include);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aryeo\Model\ListingResource' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aryeo\Model\ListingResource', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aryeo\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aryeo\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Aryeo\Model\ApiFail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aryeo\Model\ApiFail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Aryeo\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aryeo\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aryeo\Model\ListingResource';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aryeo\Model\ListingResource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aryeo\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aryeo\Model\ApiFail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aryeo\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getListingsIdAsync
     *
     * Get information about a listing.
     *
     * @param  string $listing_id The ID of a listing. (required)
     * @param  string $include Comma separated list of optional data to include in the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListingsIdAsync($listing_id, $include = null)
    {
        return $this->getListingsIdAsyncWithHttpInfo($listing_id, $include)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getListingsIdAsyncWithHttpInfo
     *
     * Get information about a listing.
     *
     * @param  string $listing_id The ID of a listing. (required)
     * @param  string $include Comma separated list of optional data to include in the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListingsIdAsyncWithHttpInfo($listing_id, $include = null)
    {
        $returnType = '\Aryeo\Model\ListingResource';
        $request = $this->getListingsIdRequest($listing_id, $include);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getListingsId'
     *
     * @param  string $listing_id The ID of a listing. (required)
     * @param  string $include Comma separated list of optional data to include in the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getListingsIdRequest($listing_id, $include = null)
    {
        // verify the required parameter 'listing_id' is set
        if ($listing_id === null || (is_array($listing_id) && count($listing_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listing_id when calling getListingsId'
            );
        }
        if (strlen($listing_id) > 255) {
            throw new \InvalidArgumentException('invalid length for "$listing_id" when calling ListingsApi.getListingsId, must be smaller than or equal to 255.');
        }
        if (strlen($listing_id) < 0) {
            throw new \InvalidArgumentException('invalid length for "$listing_id" when calling ListingsApi.getListingsId, must be bigger than or equal to 0.');
        }

        if ($include !== null && strlen($include) > 255) {
            throw new \InvalidArgumentException('invalid length for "$include" when calling ListingsApi.getListingsId, must be smaller than or equal to 255.');
        }
        if ($include !== null && strlen($include) < 0) {
            throw new \InvalidArgumentException('invalid length for "$include" when calling ListingsApi.getListingsId, must be bigger than or equal to 0.');
        }


        $resourcePath = '/listings/{listing_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include !== null) {
            if('form' === 'form' && is_array($include)) {
                foreach($include as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['include'] = $include;
            }
        }


        // path params
        if ($listing_id !== null) {
            $resourcePath = str_replace(
                '{' . 'listing_id' . '}',
                ObjectSerializer::toPathValue($listing_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
