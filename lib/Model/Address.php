<?php
/**
 * Address
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Aryeo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Aryeo
 *
 * Contact: jarrod@aryeo.com
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aryeo\Model;

use \ArrayAccess;
use \Aryeo\ObjectSerializer;

/**
 * Address Class Doc Comment
 *
 * @category Class
 * @description A street address and additional metadata about a location.
 * @package  Aryeo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Address implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Address';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'latitude' => 'float',
        'longitude' => 'float',
        'street_number' => 'string',
        'street_name' => 'string',
        'unit_number' => 'string',
        'postal_code' => 'string',
        'city' => 'string',
        'city_region' => 'string',
        'county_or_parish' => 'string',
        'state_or_province' => 'string',
        'state_or_province_region' => 'string',
        'country' => 'string',
        'country_region' => 'string',
        'unparsed_address' => 'string',
        'unparsed_address_part_one' => 'string',
        'unparsed_address_part_two' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'latitude' => null,
        'longitude' => null,
        'street_number' => null,
        'street_name' => null,
        'unit_number' => null,
        'postal_code' => null,
        'city' => null,
        'city_region' => null,
        'county_or_parish' => null,
        'state_or_province' => null,
        'state_or_province_region' => null,
        'country' => null,
        'country_region' => null,
        'unparsed_address' => null,
        'unparsed_address_part_one' => null,
        'unparsed_address_part_two' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'latitude' => 'latitude',
        'longitude' => 'longitude',
        'street_number' => 'street_number',
        'street_name' => 'street_name',
        'unit_number' => 'unit_number',
        'postal_code' => 'postal_code',
        'city' => 'city',
        'city_region' => 'city_region',
        'county_or_parish' => 'county_or_parish',
        'state_or_province' => 'state_or_province',
        'state_or_province_region' => 'state_or_province_region',
        'country' => 'country',
        'country_region' => 'country_region',
        'unparsed_address' => 'unparsed_address',
        'unparsed_address_part_one' => 'unparsed_address_part_one',
        'unparsed_address_part_two' => 'unparsed_address_part_two'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude',
        'street_number' => 'setStreetNumber',
        'street_name' => 'setStreetName',
        'unit_number' => 'setUnitNumber',
        'postal_code' => 'setPostalCode',
        'city' => 'setCity',
        'city_region' => 'setCityRegion',
        'county_or_parish' => 'setCountyOrParish',
        'state_or_province' => 'setStateOrProvince',
        'state_or_province_region' => 'setStateOrProvinceRegion',
        'country' => 'setCountry',
        'country_region' => 'setCountryRegion',
        'unparsed_address' => 'setUnparsedAddress',
        'unparsed_address_part_one' => 'setUnparsedAddressPartOne',
        'unparsed_address_part_two' => 'setUnparsedAddressPartTwo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude',
        'street_number' => 'getStreetNumber',
        'street_name' => 'getStreetName',
        'unit_number' => 'getUnitNumber',
        'postal_code' => 'getPostalCode',
        'city' => 'getCity',
        'city_region' => 'getCityRegion',
        'county_or_parish' => 'getCountyOrParish',
        'state_or_province' => 'getStateOrProvince',
        'state_or_province_region' => 'getStateOrProvinceRegion',
        'country' => 'getCountry',
        'country_region' => 'getCountryRegion',
        'unparsed_address' => 'getUnparsedAddress',
        'unparsed_address_part_one' => 'getUnparsedAddressPartOne',
        'unparsed_address_part_two' => 'getUnparsedAddressPartTwo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['latitude'] = $data['latitude'] ?? null;
        $this->container['longitude'] = $data['longitude'] ?? null;
        $this->container['street_number'] = $data['street_number'] ?? null;
        $this->container['street_name'] = $data['street_name'] ?? null;
        $this->container['unit_number'] = $data['unit_number'] ?? null;
        $this->container['postal_code'] = $data['postal_code'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['city_region'] = $data['city_region'] ?? null;
        $this->container['county_or_parish'] = $data['county_or_parish'] ?? null;
        $this->container['state_or_province'] = $data['state_or_province'] ?? null;
        $this->container['state_or_province_region'] = $data['state_or_province_region'] ?? null;
        $this->container['country'] = $data['country'] ?? null;
        $this->container['country_region'] = $data['country_region'] ?? null;
        $this->container['unparsed_address'] = $data['unparsed_address'] ?? null;
        $this->container['unparsed_address_part_one'] = $data['unparsed_address_part_one'] ?? null;
        $this->container['unparsed_address_part_two'] = $data['unparsed_address_part_two'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ((mb_strlen($this->container['id']) > 36)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be smaller than or equal to 36.";
        }

        if ((mb_strlen($this->container['id']) < 36)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 36.";
        }

        if ($this->container['latitude'] === null) {
            $invalidProperties[] = "'latitude' can't be null";
        }
        if (($this->container['latitude'] > 180)) {
            $invalidProperties[] = "invalid value for 'latitude', must be smaller than or equal to 180.";
        }

        if (($this->container['latitude'] < -180)) {
            $invalidProperties[] = "invalid value for 'latitude', must be bigger than or equal to -180.";
        }

        if ($this->container['longitude'] === null) {
            $invalidProperties[] = "'longitude' can't be null";
        }
        if (($this->container['longitude'] > 180)) {
            $invalidProperties[] = "invalid value for 'longitude', must be smaller than or equal to 180.";
        }

        if (($this->container['longitude'] < -180)) {
            $invalidProperties[] = "invalid value for 'longitude', must be bigger than or equal to -180.";
        }

        if (!is_null($this->container['street_number']) && (mb_strlen($this->container['street_number']) > 255)) {
            $invalidProperties[] = "invalid value for 'street_number', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['street_number']) && (mb_strlen($this->container['street_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'street_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['street_name']) && (mb_strlen($this->container['street_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'street_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['street_name']) && (mb_strlen($this->container['street_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'street_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['unit_number']) && (mb_strlen($this->container['unit_number']) > 255)) {
            $invalidProperties[] = "invalid value for 'unit_number', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['unit_number']) && (mb_strlen($this->container['unit_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'unit_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['postal_code']) && (mb_strlen($this->container['postal_code']) > 255)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['postal_code']) && (mb_strlen($this->container['postal_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) > 255)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) < 0)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['city_region']) && (mb_strlen($this->container['city_region']) > 255)) {
            $invalidProperties[] = "invalid value for 'city_region', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['city_region']) && (mb_strlen($this->container['city_region']) < 0)) {
            $invalidProperties[] = "invalid value for 'city_region', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['county_or_parish']) && (mb_strlen($this->container['county_or_parish']) > 255)) {
            $invalidProperties[] = "invalid value for 'county_or_parish', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['county_or_parish']) && (mb_strlen($this->container['county_or_parish']) < 0)) {
            $invalidProperties[] = "invalid value for 'county_or_parish', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['state_or_province']) && (mb_strlen($this->container['state_or_province']) > 255)) {
            $invalidProperties[] = "invalid value for 'state_or_province', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['state_or_province']) && (mb_strlen($this->container['state_or_province']) < 0)) {
            $invalidProperties[] = "invalid value for 'state_or_province', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['state_or_province_region']) && (mb_strlen($this->container['state_or_province_region']) > 255)) {
            $invalidProperties[] = "invalid value for 'state_or_province_region', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['state_or_province_region']) && (mb_strlen($this->container['state_or_province_region']) < 0)) {
            $invalidProperties[] = "invalid value for 'state_or_province_region', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['country']) && (mb_strlen($this->container['country']) > 255)) {
            $invalidProperties[] = "invalid value for 'country', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['country']) && (mb_strlen($this->container['country']) < 0)) {
            $invalidProperties[] = "invalid value for 'country', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['country_region']) && (mb_strlen($this->container['country_region']) > 255)) {
            $invalidProperties[] = "invalid value for 'country_region', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['country_region']) && (mb_strlen($this->container['country_region']) < 0)) {
            $invalidProperties[] = "invalid value for 'country_region', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['unparsed_address']) && (mb_strlen($this->container['unparsed_address']) > 255)) {
            $invalidProperties[] = "invalid value for 'unparsed_address', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['unparsed_address']) && (mb_strlen($this->container['unparsed_address']) < 0)) {
            $invalidProperties[] = "invalid value for 'unparsed_address', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['unparsed_address_part_one']) && (mb_strlen($this->container['unparsed_address_part_one']) > 255)) {
            $invalidProperties[] = "invalid value for 'unparsed_address_part_one', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['unparsed_address_part_one']) && (mb_strlen($this->container['unparsed_address_part_one']) < 0)) {
            $invalidProperties[] = "invalid value for 'unparsed_address_part_one', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['unparsed_address_part_two']) && (mb_strlen($this->container['unparsed_address_part_two']) > 255)) {
            $invalidProperties[] = "invalid value for 'unparsed_address_part_two', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['unparsed_address_part_two']) && (mb_strlen($this->container['unparsed_address_part_two']) < 0)) {
            $invalidProperties[] = "invalid value for 'unparsed_address_part_two', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id ID of the address. UUID Version 4.
     *
     * @return self
     */
    public function setId($id)
    {
        if ((mb_strlen($id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $id when calling Address., must be smaller than or equal to 36.');
        }
        if ((mb_strlen($id) < 36)) {
            throw new \InvalidArgumentException('invalid length for $id when calling Address., must be bigger than or equal to 36.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return float
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param float $latitude The geographic latitude of some reference point of the location, specified in degrees and decimal parts. Positive numbers must not include the plus symbol.
     *
     * @return self
     */
    public function setLatitude($latitude)
    {

        if (($latitude > 180)) {
            throw new \InvalidArgumentException('invalid value for $latitude when calling Address., must be smaller than or equal to 180.');
        }
        if (($latitude < -180)) {
            throw new \InvalidArgumentException('invalid value for $latitude when calling Address., must be bigger than or equal to -180.');
        }

        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return float
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param float $longitude The geographic longitude of some reference point of the location, specified in degrees and decimal parts. Positive numbers must not include the plus symbol.
     *
     * @return self
     */
    public function setLongitude($longitude)
    {

        if (($longitude > 180)) {
            throw new \InvalidArgumentException('invalid value for $longitude when calling Address., must be smaller than or equal to 180.');
        }
        if (($longitude < -180)) {
            throw new \InvalidArgumentException('invalid value for $longitude when calling Address., must be bigger than or equal to -180.');
        }

        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets street_number
     *
     * @return string|null
     */
    public function getStreetNumber()
    {
        return $this->container['street_number'];
    }

    /**
     * Sets street_number
     *
     * @param string|null $street_number The street number portion of a location's address. In some areas, the street number may contain non-numeric characters. This field can also contain extensions and modifiers to the street number, such as \"1/2\" or \"-B\".
     *
     * @return self
     */
    public function setStreetNumber($street_number)
    {
        if (!is_null($street_number) && (mb_strlen($street_number) > 255)) {
            throw new \InvalidArgumentException('invalid length for $street_number when calling Address., must be smaller than or equal to 255.');
        }
        if (!is_null($street_number) && (mb_strlen($street_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $street_number when calling Address., must be bigger than or equal to 0.');
        }

        $this->container['street_number'] = $street_number;

        return $this;
    }

    /**
     * Gets street_name
     *
     * @return string|null
     */
    public function getStreetName()
    {
        return $this->container['street_name'];
    }

    /**
     * Sets street_name
     *
     * @param string|null $street_name The street name portion of a location's address.
     *
     * @return self
     */
    public function setStreetName($street_name)
    {
        if (!is_null($street_name) && (mb_strlen($street_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $street_name when calling Address., must be smaller than or equal to 255.');
        }
        if (!is_null($street_name) && (mb_strlen($street_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $street_name when calling Address., must be bigger than or equal to 0.');
        }

        $this->container['street_name'] = $street_name;

        return $this;
    }

    /**
     * Gets unit_number
     *
     * @return string|null
     */
    public function getUnitNumber()
    {
        return $this->container['unit_number'];
    }

    /**
     * Sets unit_number
     *
     * @param string|null $unit_number The number or portion of a larger building or complex. Examples are: \"APT G\", \"55\", etc.
     *
     * @return self
     */
    public function setUnitNumber($unit_number)
    {
        if (!is_null($unit_number) && (mb_strlen($unit_number) > 255)) {
            throw new \InvalidArgumentException('invalid length for $unit_number when calling Address., must be smaller than or equal to 255.');
        }
        if (!is_null($unit_number) && (mb_strlen($unit_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $unit_number when calling Address., must be bigger than or equal to 0.');
        }

        $this->container['unit_number'] = $unit_number;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code The postal code portion of a location's address.
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        if (!is_null($postal_code) && (mb_strlen($postal_code) > 255)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling Address., must be smaller than or equal to 255.');
        }
        if (!is_null($postal_code) && (mb_strlen($postal_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling Address., must be bigger than or equal to 0.');
        }

        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city The city of a location's address.
     *
     * @return self
     */
    public function setCity($city)
    {
        if (!is_null($city) && (mb_strlen($city) > 255)) {
            throw new \InvalidArgumentException('invalid length for $city when calling Address., must be smaller than or equal to 255.');
        }
        if (!is_null($city) && (mb_strlen($city) < 0)) {
            throw new \InvalidArgumentException('invalid length for $city when calling Address., must be bigger than or equal to 0.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets city_region
     *
     * @return string|null
     */
    public function getCityRegion()
    {
        return $this->container['city_region'];
    }

    /**
     * Sets city_region
     *
     * @param string|null $city_region A sub-section or area of a defined city. Examples would be SoHo in New York, NY, Ironbound in Newark, NJ or Inside the Beltway.
     *
     * @return self
     */
    public function setCityRegion($city_region)
    {
        if (!is_null($city_region) && (mb_strlen($city_region) > 255)) {
            throw new \InvalidArgumentException('invalid length for $city_region when calling Address., must be smaller than or equal to 255.');
        }
        if (!is_null($city_region) && (mb_strlen($city_region) < 0)) {
            throw new \InvalidArgumentException('invalid length for $city_region when calling Address., must be bigger than or equal to 0.');
        }

        $this->container['city_region'] = $city_region;

        return $this;
    }

    /**
     * Gets county_or_parish
     *
     * @return string|null
     */
    public function getCountyOrParish()
    {
        return $this->container['county_or_parish'];
    }

    /**
     * Sets county_or_parish
     *
     * @param string|null $county_or_parish The County, Parish or other regional authority of the location.
     *
     * @return self
     */
    public function setCountyOrParish($county_or_parish)
    {
        if (!is_null($county_or_parish) && (mb_strlen($county_or_parish) > 255)) {
            throw new \InvalidArgumentException('invalid length for $county_or_parish when calling Address., must be smaller than or equal to 255.');
        }
        if (!is_null($county_or_parish) && (mb_strlen($county_or_parish) < 0)) {
            throw new \InvalidArgumentException('invalid length for $county_or_parish when calling Address., must be bigger than or equal to 0.');
        }

        $this->container['county_or_parish'] = $county_or_parish;

        return $this;
    }

    /**
     * Gets state_or_province
     *
     * @return string|null
     */
    public function getStateOrProvince()
    {
        return $this->container['state_or_province'];
    }

    /**
     * Sets state_or_province
     *
     * @param string|null $state_or_province The ISO 3166-2 subdivision code for the state or province of the location. For example, “MA” for Massachusetts, United States.
     *
     * @return self
     */
    public function setStateOrProvince($state_or_province)
    {
        if (!is_null($state_or_province) && (mb_strlen($state_or_province) > 255)) {
            throw new \InvalidArgumentException('invalid length for $state_or_province when calling Address., must be smaller than or equal to 255.');
        }
        if (!is_null($state_or_province) && (mb_strlen($state_or_province) < 0)) {
            throw new \InvalidArgumentException('invalid length for $state_or_province when calling Address., must be bigger than or equal to 0.');
        }

        $this->container['state_or_province'] = $state_or_province;

        return $this;
    }

    /**
     * Gets state_or_province_region
     *
     * @return string|null
     */
    public function getStateOrProvinceRegion()
    {
        return $this->container['state_or_province_region'];
    }

    /**
     * Sets state_or_province_region
     *
     * @param string|null $state_or_province_region A sub-section or area of a defined state or province. Examples would be the Keys in FL or Hudson Valley in NY.
     *
     * @return self
     */
    public function setStateOrProvinceRegion($state_or_province_region)
    {
        if (!is_null($state_or_province_region) && (mb_strlen($state_or_province_region) > 255)) {
            throw new \InvalidArgumentException('invalid length for $state_or_province_region when calling Address., must be smaller than or equal to 255.');
        }
        if (!is_null($state_or_province_region) && (mb_strlen($state_or_province_region) < 0)) {
            throw new \InvalidArgumentException('invalid length for $state_or_province_region when calling Address., must be bigger than or equal to 0.');
        }

        $this->container['state_or_province_region'] = $state_or_province_region;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country The ISO 3166-1 country code for this for the country of the location.
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (!is_null($country) && (mb_strlen($country) > 255)) {
            throw new \InvalidArgumentException('invalid length for $country when calling Address., must be smaller than or equal to 255.');
        }
        if (!is_null($country) && (mb_strlen($country) < 0)) {
            throw new \InvalidArgumentException('invalid length for $country when calling Address., must be bigger than or equal to 0.');
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets country_region
     *
     * @return string|null
     */
    public function getCountryRegion()
    {
        return $this->container['country_region'];
    }

    /**
     * Sets country_region
     *
     * @param string|null $country_region A sub-section or area of a defined country. Examples would be Napa Valley in the US, or the Amalfi Coast in Italy.
     *
     * @return self
     */
    public function setCountryRegion($country_region)
    {
        if (!is_null($country_region) && (mb_strlen($country_region) > 255)) {
            throw new \InvalidArgumentException('invalid length for $country_region when calling Address., must be smaller than or equal to 255.');
        }
        if (!is_null($country_region) && (mb_strlen($country_region) < 0)) {
            throw new \InvalidArgumentException('invalid length for $country_region when calling Address., must be bigger than or equal to 0.');
        }

        $this->container['country_region'] = $country_region;

        return $this;
    }

    /**
     * Gets unparsed_address
     *
     * @return string|null
     */
    public function getUnparsedAddress()
    {
        return $this->container['unparsed_address'];
    }

    /**
     * Sets unparsed_address
     *
     * @param string|null $unparsed_address Unparsed text representation of the address.
     *
     * @return self
     */
    public function setUnparsedAddress($unparsed_address)
    {
        if (!is_null($unparsed_address) && (mb_strlen($unparsed_address) > 255)) {
            throw new \InvalidArgumentException('invalid length for $unparsed_address when calling Address., must be smaller than or equal to 255.');
        }
        if (!is_null($unparsed_address) && (mb_strlen($unparsed_address) < 0)) {
            throw new \InvalidArgumentException('invalid length for $unparsed_address when calling Address., must be bigger than or equal to 0.');
        }

        $this->container['unparsed_address'] = $unparsed_address;

        return $this;
    }

    /**
     * Gets unparsed_address_part_one
     *
     * @return string|null
     */
    public function getUnparsedAddressPartOne()
    {
        return $this->container['unparsed_address_part_one'];
    }

    /**
     * Sets unparsed_address_part_one
     *
     * @param string|null $unparsed_address_part_one Unparsed text representation of the first part of the address, typically including the street number, street name, and unit number if applicable.
     *
     * @return self
     */
    public function setUnparsedAddressPartOne($unparsed_address_part_one)
    {
        if (!is_null($unparsed_address_part_one) && (mb_strlen($unparsed_address_part_one) > 255)) {
            throw new \InvalidArgumentException('invalid length for $unparsed_address_part_one when calling Address., must be smaller than or equal to 255.');
        }
        if (!is_null($unparsed_address_part_one) && (mb_strlen($unparsed_address_part_one) < 0)) {
            throw new \InvalidArgumentException('invalid length for $unparsed_address_part_one when calling Address., must be bigger than or equal to 0.');
        }

        $this->container['unparsed_address_part_one'] = $unparsed_address_part_one;

        return $this;
    }

    /**
     * Gets unparsed_address_part_two
     *
     * @return string|null
     */
    public function getUnparsedAddressPartTwo()
    {
        return $this->container['unparsed_address_part_two'];
    }

    /**
     * Sets unparsed_address_part_two
     *
     * @param string|null $unparsed_address_part_two Unparsed text representation of the second part of the address, typically including the city, state or province, and postal code.
     *
     * @return self
     */
    public function setUnparsedAddressPartTwo($unparsed_address_part_two)
    {
        if (!is_null($unparsed_address_part_two) && (mb_strlen($unparsed_address_part_two) > 255)) {
            throw new \InvalidArgumentException('invalid length for $unparsed_address_part_two when calling Address., must be smaller than or equal to 255.');
        }
        if (!is_null($unparsed_address_part_two) && (mb_strlen($unparsed_address_part_two) < 0)) {
            throw new \InvalidArgumentException('invalid length for $unparsed_address_part_two when calling Address., must be bigger than or equal to 0.');
        }

        $this->container['unparsed_address_part_two'] = $unparsed_address_part_two;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


