<?php
/**
 * Group
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Aryeo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Aryeo
 *
 * Contact: jarrod@aryeo.com
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aryeo\Model;

use \ArrayAccess;
use \Aryeo\ObjectSerializer;

/**
 * Group Class Doc Comment
 *
 * @category Class
 * @description A collection of users that can interact with the Aryeo platform. Permissions and properties are determined based on the group&#39;s type which can be creator, agent, or brokerage.
 * @package  Aryeo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Group implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Group';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'type' => 'string',
        'name' => 'string',
        'email' => 'string',
        'phone' => 'string',
        'website_url' => 'string',
        'logo_url' => 'string',
        'avatar_url' => 'string',
        'office_name' => 'string',
        'license_number' => 'string',
        'social_profiles' => '\Aryeo\Model\SocialProfiles',
        'default_order_form' => '\Aryeo\Model\OrderForm',
        'order_forms' => '\Aryeo\Model\OrderForm[]',
        'owner' => '\Aryeo\Model\User',
        'users' => '\Aryeo\Model\User[]',
        'is_brokerage_or_brokerage_agent' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'type' => null,
        'name' => null,
        'email' => 'email',
        'phone' => null,
        'website_url' => 'uri',
        'logo_url' => 'uri',
        'avatar_url' => 'uri',
        'office_name' => null,
        'license_number' => null,
        'social_profiles' => null,
        'default_order_form' => null,
        'order_forms' => null,
        'owner' => null,
        'users' => null,
        'is_brokerage_or_brokerage_agent' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'name' => 'name',
        'email' => 'email',
        'phone' => 'phone',
        'website_url' => 'website_url',
        'logo_url' => 'logo_url',
        'avatar_url' => 'avatar_url',
        'office_name' => 'office_name',
        'license_number' => 'license_number',
        'social_profiles' => 'social_profiles',
        'default_order_form' => 'default_order_form',
        'order_forms' => 'order_forms',
        'owner' => 'owner',
        'users' => 'users',
        'is_brokerage_or_brokerage_agent' => 'is_brokerage_or_brokerage_agent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'name' => 'setName',
        'email' => 'setEmail',
        'phone' => 'setPhone',
        'website_url' => 'setWebsiteUrl',
        'logo_url' => 'setLogoUrl',
        'avatar_url' => 'setAvatarUrl',
        'office_name' => 'setOfficeName',
        'license_number' => 'setLicenseNumber',
        'social_profiles' => 'setSocialProfiles',
        'default_order_form' => 'setDefaultOrderForm',
        'order_forms' => 'setOrderForms',
        'owner' => 'setOwner',
        'users' => 'setUsers',
        'is_brokerage_or_brokerage_agent' => 'setIsBrokerageOrBrokerageAgent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'name' => 'getName',
        'email' => 'getEmail',
        'phone' => 'getPhone',
        'website_url' => 'getWebsiteUrl',
        'logo_url' => 'getLogoUrl',
        'avatar_url' => 'getAvatarUrl',
        'office_name' => 'getOfficeName',
        'license_number' => 'getLicenseNumber',
        'social_profiles' => 'getSocialProfiles',
        'default_order_form' => 'getDefaultOrderForm',
        'order_forms' => 'getOrderForms',
        'owner' => 'getOwner',
        'users' => 'getUsers',
        'is_brokerage_or_brokerage_agent' => 'getIsBrokerageOrBrokerageAgent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_CREATOR = 'CREATOR';
    const TYPE_AGENT = 'AGENT';
    const TYPE_BROKERAGE = 'BROKERAGE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CREATOR,
            self::TYPE_AGENT,
            self::TYPE_BROKERAGE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['phone'] = $data['phone'] ?? null;
        $this->container['website_url'] = $data['website_url'] ?? null;
        $this->container['logo_url'] = $data['logo_url'] ?? null;
        $this->container['avatar_url'] = $data['avatar_url'] ?? null;
        $this->container['office_name'] = $data['office_name'] ?? null;
        $this->container['license_number'] = $data['license_number'] ?? null;
        $this->container['social_profiles'] = $data['social_profiles'] ?? null;
        $this->container['default_order_form'] = $data['default_order_form'] ?? null;
        $this->container['order_forms'] = $data['order_forms'] ?? null;
        $this->container['owner'] = $data['owner'] ?? null;
        $this->container['users'] = $data['users'] ?? null;
        $this->container['is_brokerage_or_brokerage_agent'] = $data['is_brokerage_or_brokerage_agent'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ((mb_strlen($this->container['id']) > 36)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be smaller than or equal to 36.";
        }

        if ((mb_strlen($this->container['id']) < 36)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 36.";
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['type']) > 255)) {
            $invalidProperties[] = "invalid value for 'type', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['type']) < 0)) {
            $invalidProperties[] = "invalid value for 'type', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['name']) < 0)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 255)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) < 0)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['phone']) && (mb_strlen($this->container['phone']) > 255)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['phone']) && (mb_strlen($this->container['phone']) < 0)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['website_url']) && (mb_strlen($this->container['website_url']) > 255)) {
            $invalidProperties[] = "invalid value for 'website_url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['website_url']) && (mb_strlen($this->container['website_url']) < 0)) {
            $invalidProperties[] = "invalid value for 'website_url', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['logo_url']) && (mb_strlen($this->container['logo_url']) > 255)) {
            $invalidProperties[] = "invalid value for 'logo_url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['logo_url']) && (mb_strlen($this->container['logo_url']) < 0)) {
            $invalidProperties[] = "invalid value for 'logo_url', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['avatar_url']) && (mb_strlen($this->container['avatar_url']) > 255)) {
            $invalidProperties[] = "invalid value for 'avatar_url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['avatar_url']) && (mb_strlen($this->container['avatar_url']) < 0)) {
            $invalidProperties[] = "invalid value for 'avatar_url', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['office_name']) && (mb_strlen($this->container['office_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'office_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['office_name']) && (mb_strlen($this->container['office_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'office_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['license_number']) && (mb_strlen($this->container['license_number']) > 255)) {
            $invalidProperties[] = "invalid value for 'license_number', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['license_number']) && (mb_strlen($this->container['license_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'license_number', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['is_brokerage_or_brokerage_agent'] === null) {
            $invalidProperties[] = "'is_brokerage_or_brokerage_agent' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id ID of the group. UUID Version 4.
     *
     * @return self
     */
    public function setId($id)
    {
        if ((mb_strlen($id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $id when calling Group., must be smaller than or equal to 36.');
        }
        if ((mb_strlen($id) < 36)) {
            throw new \InvalidArgumentException('invalid length for $id when calling Group., must be bigger than or equal to 36.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of the group. Can be CREATOR, AGENT, or BROKERAGE, and may dictate the attributes of the group returned.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($type) > 255)) {
            throw new \InvalidArgumentException('invalid length for $type when calling Group., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($type) < 0)) {
            throw new \InvalidArgumentException('invalid length for $type when calling Group., must be bigger than or equal to 0.');
        }

        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the group.
     *
     * @return self
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Group., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Group., must be bigger than or equal to 0.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The email address of a group.
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (!is_null($email) && (mb_strlen($email) > 255)) {
            throw new \InvalidArgumentException('invalid length for $email when calling Group., must be smaller than or equal to 255.');
        }
        if (!is_null($email) && (mb_strlen($email) < 0)) {
            throw new \InvalidArgumentException('invalid length for $email when calling Group., must be bigger than or equal to 0.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone A phone number represented in whichever standards specified by the group, typically ###-###-#### (separated by hyphens).
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (!is_null($phone) && (mb_strlen($phone) > 255)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling Group., must be smaller than or equal to 255.');
        }
        if (!is_null($phone) && (mb_strlen($phone) < 0)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling Group., must be bigger than or equal to 0.');
        }

        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets website_url
     *
     * @return string|null
     */
    public function getWebsiteUrl()
    {
        return $this->container['website_url'];
    }

    /**
     * Sets website_url
     *
     * @param string|null $website_url The website URL of a group.
     *
     * @return self
     */
    public function setWebsiteUrl($website_url)
    {
        if (!is_null($website_url) && (mb_strlen($website_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $website_url when calling Group., must be smaller than or equal to 255.');
        }
        if (!is_null($website_url) && (mb_strlen($website_url) < 0)) {
            throw new \InvalidArgumentException('invalid length for $website_url when calling Group., must be bigger than or equal to 0.');
        }

        $this->container['website_url'] = $website_url;

        return $this;
    }

    /**
     * Gets logo_url
     *
     * @return string|null
     */
    public function getLogoUrl()
    {
        return $this->container['logo_url'];
    }

    /**
     * Sets logo_url
     *
     * @param string|null $logo_url The logo URL of a group.
     *
     * @return self
     */
    public function setLogoUrl($logo_url)
    {
        if (!is_null($logo_url) && (mb_strlen($logo_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $logo_url when calling Group., must be smaller than or equal to 255.');
        }
        if (!is_null($logo_url) && (mb_strlen($logo_url) < 0)) {
            throw new \InvalidArgumentException('invalid length for $logo_url when calling Group., must be bigger than or equal to 0.');
        }

        $this->container['logo_url'] = $logo_url;

        return $this;
    }

    /**
     * Gets avatar_url
     *
     * @return string|null
     */
    public function getAvatarUrl()
    {
        return $this->container['avatar_url'];
    }

    /**
     * Sets avatar_url
     *
     * @param string|null $avatar_url The profile image URL of a real estate agent. Only returned if group's type is AGENT.
     *
     * @return self
     */
    public function setAvatarUrl($avatar_url)
    {
        if (!is_null($avatar_url) && (mb_strlen($avatar_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $avatar_url when calling Group., must be smaller than or equal to 255.');
        }
        if (!is_null($avatar_url) && (mb_strlen($avatar_url) < 0)) {
            throw new \InvalidArgumentException('invalid length for $avatar_url when calling Group., must be bigger than or equal to 0.');
        }

        $this->container['avatar_url'] = $avatar_url;

        return $this;
    }

    /**
     * Gets office_name
     *
     * @return string|null
     */
    public function getOfficeName()
    {
        return $this->container['office_name'];
    }

    /**
     * Sets office_name
     *
     * @param string|null $office_name The name of the brokerage or team of a real estate agent. Only returned if group's type is AGENT.
     *
     * @return self
     */
    public function setOfficeName($office_name)
    {
        if (!is_null($office_name) && (mb_strlen($office_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $office_name when calling Group., must be smaller than or equal to 255.');
        }
        if (!is_null($office_name) && (mb_strlen($office_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $office_name when calling Group., must be bigger than or equal to 0.');
        }

        $this->container['office_name'] = $office_name;

        return $this;
    }

    /**
     * Gets license_number
     *
     * @return string|null
     */
    public function getLicenseNumber()
    {
        return $this->container['license_number'];
    }

    /**
     * Sets license_number
     *
     * @param string|null $license_number The license number of a real estate agent. Only returned if group's type is AGENT.
     *
     * @return self
     */
    public function setLicenseNumber($license_number)
    {
        if (!is_null($license_number) && (mb_strlen($license_number) > 255)) {
            throw new \InvalidArgumentException('invalid length for $license_number when calling Group., must be smaller than or equal to 255.');
        }
        if (!is_null($license_number) && (mb_strlen($license_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $license_number when calling Group., must be bigger than or equal to 0.');
        }

        $this->container['license_number'] = $license_number;

        return $this;
    }

    /**
     * Gets social_profiles
     *
     * @return \Aryeo\Model\SocialProfiles|null
     */
    public function getSocialProfiles()
    {
        return $this->container['social_profiles'];
    }

    /**
     * Sets social_profiles
     *
     * @param \Aryeo\Model\SocialProfiles|null $social_profiles social_profiles
     *
     * @return self
     */
    public function setSocialProfiles($social_profiles)
    {
        $this->container['social_profiles'] = $social_profiles;

        return $this;
    }

    /**
     * Gets default_order_form
     *
     * @return \Aryeo\Model\OrderForm|null
     */
    public function getDefaultOrderForm()
    {
        return $this->container['default_order_form'];
    }

    /**
     * Sets default_order_form
     *
     * @param \Aryeo\Model\OrderForm|null $default_order_form default_order_form
     *
     * @return self
     */
    public function setDefaultOrderForm($default_order_form)
    {
        $this->container['default_order_form'] = $default_order_form;

        return $this;
    }

    /**
     * Gets order_forms
     *
     * @return \Aryeo\Model\OrderForm[]|null
     */
    public function getOrderForms()
    {
        return $this->container['order_forms'];
    }

    /**
     * Sets order_forms
     *
     * @param \Aryeo\Model\OrderForm[]|null $order_forms An array of order forms a vendor group provides for placing orders. Only returned if group's type is CREATOR.
     *
     * @return self
     */
    public function setOrderForms($order_forms)
    {
        $this->container['order_forms'] = $order_forms;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \Aryeo\Model\User|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \Aryeo\Model\User|null $owner owner
     *
     * @return self
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets users
     *
     * @return \Aryeo\Model\User[]|null
     */
    public function getUsers()
    {
        return $this->container['users'];
    }

    /**
     * Sets users
     *
     * @param \Aryeo\Model\User[]|null $users The Aryeo users associated with this group.
     *
     * @return self
     */
    public function setUsers($users)
    {
        $this->container['users'] = $users;

        return $this;
    }

    /**
     * Gets is_brokerage_or_brokerage_agent
     *
     * @return bool
     */
    public function getIsBrokerageOrBrokerageAgent()
    {
        return $this->container['is_brokerage_or_brokerage_agent'];
    }

    /**
     * Sets is_brokerage_or_brokerage_agent
     *
     * @param bool $is_brokerage_or_brokerage_agent Does this group represent a brokerage or an agent who belongs to a brokerage?
     *
     * @return self
     */
    public function setIsBrokerageOrBrokerageAgent($is_brokerage_or_brokerage_agent)
    {
        $this->container['is_brokerage_or_brokerage_agent'] = $is_brokerage_or_brokerage_agent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


