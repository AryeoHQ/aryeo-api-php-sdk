<?php
/**
 * Order
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Aryeo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Aryeo
 *
 * Contact: jarrod@aryeo.com
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aryeo\Model;

use \ArrayAccess;
use \Aryeo\ObjectSerializer;

/**
 * Order Class Doc Comment
 *
 * @category Class
 * @description A payment request for some content or service.
 * @package  Aryeo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Order implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'display_id' => 'int',
        'total_price_cents' => 'int',
        'currency' => '\Aryeo\Model\Currency',
        'payment_status' => 'string',
        'payment_url' => 'string',
        'listing' => '\Aryeo\Model\PartialListing',
        'fulfillment_status' => 'string',
        'status_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'display_id' => null,
        'total_price_cents' => 'double',
        'currency' => null,
        'payment_status' => null,
        'payment_url' => null,
        'listing' => null,
        'fulfillment_status' => null,
        'status_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'display_id' => 'display_id',
        'total_price_cents' => 'total_price_cents',
        'currency' => 'currency',
        'payment_status' => 'payment_status',
        'payment_url' => 'payment_url',
        'listing' => 'listing',
        'fulfillment_status' => 'fulfillment_status',
        'status_url' => 'status_url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'display_id' => 'setDisplayId',
        'total_price_cents' => 'setTotalPriceCents',
        'currency' => 'setCurrency',
        'payment_status' => 'setPaymentStatus',
        'payment_url' => 'setPaymentUrl',
        'listing' => 'setListing',
        'fulfillment_status' => 'setFulfillmentStatus',
        'status_url' => 'setStatusUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'display_id' => 'getDisplayId',
        'total_price_cents' => 'getTotalPriceCents',
        'currency' => 'getCurrency',
        'payment_status' => 'getPaymentStatus',
        'payment_url' => 'getPaymentUrl',
        'listing' => 'getListing',
        'fulfillment_status' => 'getFulfillmentStatus',
        'status_url' => 'getStatusUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const PAYMENT_STATUS_PAID = 'paid';
    const PAYMENT_STATUS_UNPAID = 'unpaid';
    const FULFILLMENT_STATUS_FULFILLED = 'fulfilled';
    const FULFILLMENT_STATUS_UNFULFILLED = 'unfulfilled';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentStatusAllowableValues()
    {
        return [
            self::PAYMENT_STATUS_PAID,
            self::PAYMENT_STATUS_UNPAID,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFulfillmentStatusAllowableValues()
    {
        return [
            self::FULFILLMENT_STATUS_FULFILLED,
            self::FULFILLMENT_STATUS_UNFULFILLED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['display_id'] = $data['display_id'] ?? null;
        $this->container['total_price_cents'] = $data['total_price_cents'] ?? null;
        $this->container['currency'] = $data['currency'] ?? null;
        $this->container['payment_status'] = $data['payment_status'] ?? null;
        $this->container['payment_url'] = $data['payment_url'] ?? null;
        $this->container['listing'] = $data['listing'] ?? null;
        $this->container['fulfillment_status'] = $data['fulfillment_status'] ?? null;
        $this->container['status_url'] = $data['status_url'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ((mb_strlen($this->container['id']) > 255)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['id']) < 0)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['display_id'] === null) {
            $invalidProperties[] = "'display_id' can't be null";
        }
        if ($this->container['total_price_cents'] === null) {
            $invalidProperties[] = "'total_price_cents' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['payment_status'] === null) {
            $invalidProperties[] = "'payment_status' can't be null";
        }
        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!is_null($this->container['payment_status']) && !in_array($this->container['payment_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_status', must be one of '%s'",
                $this->container['payment_status'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['payment_status']) > 255)) {
            $invalidProperties[] = "invalid value for 'payment_status', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['payment_status']) < 0)) {
            $invalidProperties[] = "invalid value for 'payment_status', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['payment_url']) && (mb_strlen($this->container['payment_url']) > 65535)) {
            $invalidProperties[] = "invalid value for 'payment_url', the character length must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['payment_url']) && (mb_strlen($this->container['payment_url']) < 0)) {
            $invalidProperties[] = "invalid value for 'payment_url', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['fulfillment_status'] === null) {
            $invalidProperties[] = "'fulfillment_status' can't be null";
        }
        $allowedValues = $this->getFulfillmentStatusAllowableValues();
        if (!is_null($this->container['fulfillment_status']) && !in_array($this->container['fulfillment_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fulfillment_status', must be one of '%s'",
                $this->container['fulfillment_status'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['fulfillment_status']) > 255)) {
            $invalidProperties[] = "invalid value for 'fulfillment_status', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['fulfillment_status']) < 0)) {
            $invalidProperties[] = "invalid value for 'fulfillment_status', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['status_url']) && (mb_strlen($this->container['status_url']) > 65535)) {
            $invalidProperties[] = "invalid value for 'status_url', the character length must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['status_url']) && (mb_strlen($this->container['status_url']) < 0)) {
            $invalidProperties[] = "invalid value for 'status_url', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id ID of the order.
     *
     * @return self
     */
    public function setId($id)
    {
        if ((mb_strlen($id) > 255)) {
            throw new \InvalidArgumentException('invalid length for $id when calling Order., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $id when calling Order., must be bigger than or equal to 0.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets display_id
     *
     * @return int
     */
    public function getDisplayId()
    {
        return $this->container['display_id'];
    }

    /**
     * Sets display_id
     *
     * @param int $display_id A vanity id to be displayed for the order. For example, \"Order #1000\".
     *
     * @return self
     */
    public function setDisplayId($display_id)
    {
        $this->container['display_id'] = $display_id;

        return $this;
    }

    /**
     * Gets total_price_cents
     *
     * @return int
     */
    public function getTotalPriceCents()
    {
        return $this->container['total_price_cents'];
    }

    /**
     * Sets total_price_cents
     *
     * @param int $total_price_cents The total price of the order given in cents.
     *
     * @return self
     */
    public function setTotalPriceCents($total_price_cents)
    {
        $this->container['total_price_cents'] = $total_price_cents;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \Aryeo\Model\Currency
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \Aryeo\Model\Currency $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets payment_status
     *
     * @return string
     */
    public function getPaymentStatus()
    {
        return $this->container['payment_status'];
    }

    /**
     * Sets payment_status
     *
     * @param string $payment_status The payment status of the order.
     *
     * @return self
     */
    public function setPaymentStatus($payment_status)
    {
        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!in_array($payment_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_status', must be one of '%s'",
                    $payment_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($payment_status) > 255)) {
            throw new \InvalidArgumentException('invalid length for $payment_status when calling Order., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($payment_status) < 0)) {
            throw new \InvalidArgumentException('invalid length for $payment_status when calling Order., must be bigger than or equal to 0.');
        }

        $this->container['payment_status'] = $payment_status;

        return $this;
    }

    /**
     * Gets payment_url
     *
     * @return string|null
     */
    public function getPaymentUrl()
    {
        return $this->container['payment_url'];
    }

    /**
     * Sets payment_url
     *
     * @param string|null $payment_url A URL for to pay for the order.
     *
     * @return self
     */
    public function setPaymentUrl($payment_url)
    {
        if (!is_null($payment_url) && (mb_strlen($payment_url) > 65535)) {
            throw new \InvalidArgumentException('invalid length for $payment_url when calling Order., must be smaller than or equal to 65535.');
        }
        if (!is_null($payment_url) && (mb_strlen($payment_url) < 0)) {
            throw new \InvalidArgumentException('invalid length for $payment_url when calling Order., must be bigger than or equal to 0.');
        }

        $this->container['payment_url'] = $payment_url;

        return $this;
    }

    /**
     * Gets listing
     *
     * @return \Aryeo\Model\PartialListing|null
     */
    public function getListing()
    {
        return $this->container['listing'];
    }

    /**
     * Sets listing
     *
     * @param \Aryeo\Model\PartialListing|null $listing listing
     *
     * @return self
     */
    public function setListing($listing)
    {
        $this->container['listing'] = $listing;

        return $this;
    }

    /**
     * Gets fulfillment_status
     *
     * @return string
     */
    public function getFulfillmentStatus()
    {
        return $this->container['fulfillment_status'];
    }

    /**
     * Sets fulfillment_status
     *
     * @param string $fulfillment_status The fulfillment status of the order.
     *
     * @return self
     */
    public function setFulfillmentStatus($fulfillment_status)
    {
        $allowedValues = $this->getFulfillmentStatusAllowableValues();
        if (!in_array($fulfillment_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fulfillment_status', must be one of '%s'",
                    $fulfillment_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($fulfillment_status) > 255)) {
            throw new \InvalidArgumentException('invalid length for $fulfillment_status when calling Order., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($fulfillment_status) < 0)) {
            throw new \InvalidArgumentException('invalid length for $fulfillment_status when calling Order., must be bigger than or equal to 0.');
        }

        $this->container['fulfillment_status'] = $fulfillment_status;

        return $this;
    }

    /**
     * Gets status_url
     *
     * @return string|null
     */
    public function getStatusUrl()
    {
        return $this->container['status_url'];
    }

    /**
     * Sets status_url
     *
     * @param string|null $status_url A URL to see the order's status.
     *
     * @return self
     */
    public function setStatusUrl($status_url)
    {
        if (!is_null($status_url) && (mb_strlen($status_url) > 65535)) {
            throw new \InvalidArgumentException('invalid length for $status_url when calling Order., must be smaller than or equal to 65535.');
        }
        if (!is_null($status_url) && (mb_strlen($status_url) < 0)) {
            throw new \InvalidArgumentException('invalid length for $status_url when calling Order., must be bigger than or equal to 0.');
        }

        $this->container['status_url'] = $status_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


