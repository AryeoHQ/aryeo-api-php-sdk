<?php
/**
 * Order
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Aryeo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Aryeo
 *
 * Contact: jarrod@aryeo.com
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aryeo\Model;

use \ArrayAccess;
use \Aryeo\ObjectSerializer;

/**
 * Order Class Doc Comment
 *
 * @category Class
 * @description A payment request for some content or service.
 * @package  Aryeo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Order implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'number' => 'int',
        'title' => 'string',
        'fulfillment_status' => 'string',
        'payment_status' => 'string',
        'currency' => 'string',
        'total_amount' => 'int',
        'payment_url' => 'string',
        'status_url' => 'string',
        'address' => '\Aryeo\Model\Address',
        'customer' => '\Aryeo\Model\Group',
        'listing' => '\Aryeo\Model\Listing',
        'items' => '\Aryeo\Model\OrderItem[]',
        'appointments' => '\Aryeo\Model\Appointment[]',
        'unconfirmed_appointments' => '\Aryeo\Model\UnconfirmedAppointment[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'number' => null,
        'title' => null,
        'fulfillment_status' => null,
        'payment_status' => null,
        'currency' => null,
        'total_amount' => null,
        'payment_url' => null,
        'status_url' => null,
        'address' => null,
        'customer' => null,
        'listing' => null,
        'items' => null,
        'appointments' => null,
        'unconfirmed_appointments' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'number' => 'number',
        'title' => 'title',
        'fulfillment_status' => 'fulfillment_status',
        'payment_status' => 'payment_status',
        'currency' => 'currency',
        'total_amount' => 'total_amount',
        'payment_url' => 'payment_url',
        'status_url' => 'status_url',
        'address' => 'address',
        'customer' => 'customer',
        'listing' => 'listing',
        'items' => 'items',
        'appointments' => 'appointments',
        'unconfirmed_appointments' => 'unconfirmed_appointments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'number' => 'setNumber',
        'title' => 'setTitle',
        'fulfillment_status' => 'setFulfillmentStatus',
        'payment_status' => 'setPaymentStatus',
        'currency' => 'setCurrency',
        'total_amount' => 'setTotalAmount',
        'payment_url' => 'setPaymentUrl',
        'status_url' => 'setStatusUrl',
        'address' => 'setAddress',
        'customer' => 'setCustomer',
        'listing' => 'setListing',
        'items' => 'setItems',
        'appointments' => 'setAppointments',
        'unconfirmed_appointments' => 'setUnconfirmedAppointments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'number' => 'getNumber',
        'title' => 'getTitle',
        'fulfillment_status' => 'getFulfillmentStatus',
        'payment_status' => 'getPaymentStatus',
        'currency' => 'getCurrency',
        'total_amount' => 'getTotalAmount',
        'payment_url' => 'getPaymentUrl',
        'status_url' => 'getStatusUrl',
        'address' => 'getAddress',
        'customer' => 'getCustomer',
        'listing' => 'getListing',
        'items' => 'getItems',
        'appointments' => 'getAppointments',
        'unconfirmed_appointments' => 'getUnconfirmedAppointments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const FULFILLMENT_STATUS_FULFILLED = 'FULFILLED';
    const FULFILLMENT_STATUS_UNFULFILLED = 'UNFULFILLED';
    const PAYMENT_STATUS_PAID = 'PAID';
    const PAYMENT_STATUS_UNPAID = 'UNPAID';
    const CURRENCY_USD = 'USD';
    const CURRENCY_CAD = 'CAD';
    const CURRENCY_GBP = 'GBP';
    const CURRENCY_CHF = 'CHF';
    const CURRENCY_EUR = 'EUR';
    const CURRENCY_AUD = 'AUD';
    const CURRENCY_NZD = 'NZD';
    const CURRENCY_ZAR = 'ZAR';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFulfillmentStatusAllowableValues()
    {
        return [
            self::FULFILLMENT_STATUS_FULFILLED,
            self::FULFILLMENT_STATUS_UNFULFILLED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentStatusAllowableValues()
    {
        return [
            self::PAYMENT_STATUS_PAID,
            self::PAYMENT_STATUS_UNPAID,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_USD,
            self::CURRENCY_CAD,
            self::CURRENCY_GBP,
            self::CURRENCY_CHF,
            self::CURRENCY_EUR,
            self::CURRENCY_AUD,
            self::CURRENCY_NZD,
            self::CURRENCY_ZAR,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['number'] = $data['number'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['fulfillment_status'] = $data['fulfillment_status'] ?? null;
        $this->container['payment_status'] = $data['payment_status'] ?? null;
        $this->container['currency'] = $data['currency'] ?? null;
        $this->container['total_amount'] = $data['total_amount'] ?? null;
        $this->container['payment_url'] = $data['payment_url'] ?? null;
        $this->container['status_url'] = $data['status_url'] ?? null;
        $this->container['address'] = $data['address'] ?? null;
        $this->container['customer'] = $data['customer'] ?? null;
        $this->container['listing'] = $data['listing'] ?? null;
        $this->container['items'] = $data['items'] ?? null;
        $this->container['appointments'] = $data['appointments'] ?? null;
        $this->container['unconfirmed_appointments'] = $data['unconfirmed_appointments'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ((mb_strlen($this->container['id']) > 36)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be smaller than or equal to 36.";
        }

        if ((mb_strlen($this->container['id']) < 36)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 36.";
        }

        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ((mb_strlen($this->container['title']) > 255)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['title']) < 0)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['fulfillment_status'] === null) {
            $invalidProperties[] = "'fulfillment_status' can't be null";
        }
        $allowedValues = $this->getFulfillmentStatusAllowableValues();
        if (!is_null($this->container['fulfillment_status']) && !in_array($this->container['fulfillment_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fulfillment_status', must be one of '%s'",
                $this->container['fulfillment_status'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['fulfillment_status']) > 255)) {
            $invalidProperties[] = "invalid value for 'fulfillment_status', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['fulfillment_status']) < 0)) {
            $invalidProperties[] = "invalid value for 'fulfillment_status', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['payment_status'] === null) {
            $invalidProperties[] = "'payment_status' can't be null";
        }
        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!is_null($this->container['payment_status']) && !in_array($this->container['payment_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_status', must be one of '%s'",
                $this->container['payment_status'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['payment_status']) > 255)) {
            $invalidProperties[] = "invalid value for 'payment_status', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['payment_status']) < 0)) {
            $invalidProperties[] = "invalid value for 'payment_status', the character length must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'currency', must be one of '%s'",
                $this->container['currency'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['currency']) && (mb_strlen($this->container['currency']) > 255)) {
            $invalidProperties[] = "invalid value for 'currency', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['currency']) && (mb_strlen($this->container['currency']) < 0)) {
            $invalidProperties[] = "invalid value for 'currency', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['total_amount']) && ($this->container['total_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'total_amount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['payment_url']) && (mb_strlen($this->container['payment_url']) > 65535)) {
            $invalidProperties[] = "invalid value for 'payment_url', the character length must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['payment_url']) && (mb_strlen($this->container['payment_url']) < 0)) {
            $invalidProperties[] = "invalid value for 'payment_url', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['status_url'] === null) {
            $invalidProperties[] = "'status_url' can't be null";
        }
        if ((mb_strlen($this->container['status_url']) > 65535)) {
            $invalidProperties[] = "invalid value for 'status_url', the character length must be smaller than or equal to 65535.";
        }

        if ((mb_strlen($this->container['status_url']) < 0)) {
            $invalidProperties[] = "invalid value for 'status_url', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id ID of the order. UUID Version 4.
     *
     * @return self
     */
    public function setId($id)
    {
        if ((mb_strlen($id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $id when calling Order., must be smaller than or equal to 36.');
        }
        if ((mb_strlen($id) < 36)) {
            throw new \InvalidArgumentException('invalid length for $id when calling Order., must be bigger than or equal to 36.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return int
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int $number A vanity id used for internal tracking of orders for a given vendor.
     *
     * @return self
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The title of the order, generated by combining the order's number property with the prefix \"Order #\".
     *
     * @return self
     */
    public function setTitle($title)
    {
        if ((mb_strlen($title) > 255)) {
            throw new \InvalidArgumentException('invalid length for $title when calling Order., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($title) < 0)) {
            throw new \InvalidArgumentException('invalid length for $title when calling Order., must be bigger than or equal to 0.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets fulfillment_status
     *
     * @return string
     */
    public function getFulfillmentStatus()
    {
        return $this->container['fulfillment_status'];
    }

    /**
     * Sets fulfillment_status
     *
     * @param string $fulfillment_status The fulfillment status of the order.
     *
     * @return self
     */
    public function setFulfillmentStatus($fulfillment_status)
    {
        $allowedValues = $this->getFulfillmentStatusAllowableValues();
        if (!in_array($fulfillment_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fulfillment_status', must be one of '%s'",
                    $fulfillment_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($fulfillment_status) > 255)) {
            throw new \InvalidArgumentException('invalid length for $fulfillment_status when calling Order., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($fulfillment_status) < 0)) {
            throw new \InvalidArgumentException('invalid length for $fulfillment_status when calling Order., must be bigger than or equal to 0.');
        }

        $this->container['fulfillment_status'] = $fulfillment_status;

        return $this;
    }

    /**
     * Gets payment_status
     *
     * @return string
     */
    public function getPaymentStatus()
    {
        return $this->container['payment_status'];
    }

    /**
     * Sets payment_status
     *
     * @param string $payment_status The payment status of the order.
     *
     * @return self
     */
    public function setPaymentStatus($payment_status)
    {
        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!in_array($payment_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_status', must be one of '%s'",
                    $payment_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($payment_status) > 255)) {
            throw new \InvalidArgumentException('invalid length for $payment_status when calling Order., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($payment_status) < 0)) {
            throw new \InvalidArgumentException('invalid length for $payment_status when calling Order., must be bigger than or equal to 0.');
        }

        $this->container['payment_status'] = $payment_status;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency The three-letter ISO 4217 currency code for the currency in which this order was or will be transacted. Must be a supported currency of Aryeo.
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($currency) && !in_array($currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'currency', must be one of '%s'",
                    $currency,
                    implode("', '", $allowedValues)
                )
            );
        }
        if (!is_null($currency) && (mb_strlen($currency) > 255)) {
            throw new \InvalidArgumentException('invalid length for $currency when calling Order., must be smaller than or equal to 255.');
        }
        if (!is_null($currency) && (mb_strlen($currency) < 0)) {
            throw new \InvalidArgumentException('invalid length for $currency when calling Order., must be bigger than or equal to 0.');
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return int|null
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param int|null $total_amount A positive integer in the smallest currency unit (that is, 100 cents for $1.00) representing the total order amount that was or will be charged. This accounts for order items and taxes.
     *
     * @return self
     */
    public function setTotalAmount($total_amount)
    {

        if (!is_null($total_amount) && ($total_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $total_amount when calling Order., must be bigger than or equal to 0.');
        }

        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets payment_url
     *
     * @return string|null
     */
    public function getPaymentUrl()
    {
        return $this->container['payment_url'];
    }

    /**
     * Sets payment_url
     *
     * @param string|null $payment_url A URL of a publicly-accessible webpage to pay for the order.
     *
     * @return self
     */
    public function setPaymentUrl($payment_url)
    {
        if (!is_null($payment_url) && (mb_strlen($payment_url) > 65535)) {
            throw new \InvalidArgumentException('invalid length for $payment_url when calling Order., must be smaller than or equal to 65535.');
        }
        if (!is_null($payment_url) && (mb_strlen($payment_url) < 0)) {
            throw new \InvalidArgumentException('invalid length for $payment_url when calling Order., must be bigger than or equal to 0.');
        }

        $this->container['payment_url'] = $payment_url;

        return $this;
    }

    /**
     * Gets status_url
     *
     * @return string
     */
    public function getStatusUrl()
    {
        return $this->container['status_url'];
    }

    /**
     * Sets status_url
     *
     * @param string $status_url A URL of a publicly-accessible webpage to see the order's status.
     *
     * @return self
     */
    public function setStatusUrl($status_url)
    {
        if ((mb_strlen($status_url) > 65535)) {
            throw new \InvalidArgumentException('invalid length for $status_url when calling Order., must be smaller than or equal to 65535.');
        }
        if ((mb_strlen($status_url) < 0)) {
            throw new \InvalidArgumentException('invalid length for $status_url when calling Order., must be bigger than or equal to 0.');
        }

        $this->container['status_url'] = $status_url;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Aryeo\Model\Address|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Aryeo\Model\Address|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \Aryeo\Model\Group|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \Aryeo\Model\Group|null $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets listing
     *
     * @return \Aryeo\Model\Listing|null
     */
    public function getListing()
    {
        return $this->container['listing'];
    }

    /**
     * Sets listing
     *
     * @param \Aryeo\Model\Listing|null $listing listing
     *
     * @return self
     */
    public function setListing($listing)
    {
        $this->container['listing'] = $listing;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \Aryeo\Model\OrderItem[]|null
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \Aryeo\Model\OrderItem[]|null $items items
     *
     * @return self
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets appointments
     *
     * @return \Aryeo\Model\Appointment[]|null
     */
    public function getAppointments()
    {
        return $this->container['appointments'];
    }

    /**
     * Sets appointments
     *
     * @param \Aryeo\Model\Appointment[]|null $appointments appointments
     *
     * @return self
     */
    public function setAppointments($appointments)
    {
        $this->container['appointments'] = $appointments;

        return $this;
    }

    /**
     * Gets unconfirmed_appointments
     *
     * @return \Aryeo\Model\UnconfirmedAppointment[]|null
     */
    public function getUnconfirmedAppointments()
    {
        return $this->container['unconfirmed_appointments'];
    }

    /**
     * Sets unconfirmed_appointments
     *
     * @param \Aryeo\Model\UnconfirmedAppointment[]|null $unconfirmed_appointments unconfirmed_appointments
     *
     * @return self
     */
    public function setUnconfirmedAppointments($unconfirmed_appointments)
    {
        $this->container['unconfirmed_appointments'] = $unconfirmed_appointments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


