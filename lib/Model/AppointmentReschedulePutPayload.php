<?php
/**
 * AppointmentReschedulePutPayload
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Aryeo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Aryeo
 *
 * Contact: jarrod@aryeo.com
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aryeo\Model;

use \ArrayAccess;
use \Aryeo\ObjectSerializer;

/**
 * AppointmentReschedulePutPayload Class Doc Comment
 *
 * @category Class
 * @description Payload for rescheduling an appointment record.
 * @package  Aryeo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class AppointmentReschedulePutPayload implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AppointmentReschedulePutPayload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'start_at' => '\DateTime',
        'end_at' => '\DateTime',
        'notify_customer' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'start_at' => 'date-time',
        'end_at' => 'date-time',
        'notify_customer' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'start_at' => 'start_at',
        'end_at' => 'end_at',
        'notify_customer' => 'notify_customer'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'start_at' => 'setStartAt',
        'end_at' => 'setEndAt',
        'notify_customer' => 'setNotifyCustomer'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'start_at' => 'getStartAt',
        'end_at' => 'getEndAt',
        'notify_customer' => 'getNotifyCustomer'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['start_at'] = $data['start_at'] ?? null;
        $this->container['end_at'] = $data['end_at'] ?? null;
        $this->container['notify_customer'] = $data['notify_customer'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['start_at'] === null) {
            $invalidProperties[] = "'start_at' can't be null";
        }
        if ((mb_strlen($this->container['start_at']) > 255)) {
            $invalidProperties[] = "invalid value for 'start_at', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['start_at']) < 0)) {
            $invalidProperties[] = "invalid value for 'start_at', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['end_at'] === null) {
            $invalidProperties[] = "'end_at' can't be null";
        }
        if ((mb_strlen($this->container['end_at']) > 255)) {
            $invalidProperties[] = "invalid value for 'end_at', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['end_at']) < 0)) {
            $invalidProperties[] = "invalid value for 'end_at', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets start_at
     *
     * @return \DateTime
     */
    public function getStartAt()
    {
        return $this->container['start_at'];
    }

    /**
     * Sets start_at
     *
     * @param \DateTime $start_at The new date and time (ISO 8601 format) when the appointment is set to start.
     *
     * @return self
     */
    public function setStartAt($start_at)
    {
        if ((mb_strlen($start_at) > 255)) {
            throw new \InvalidArgumentException('invalid length for $start_at when calling AppointmentReschedulePutPayload., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($start_at) < 0)) {
            throw new \InvalidArgumentException('invalid length for $start_at when calling AppointmentReschedulePutPayload., must be bigger than or equal to 0.');
        }

        $this->container['start_at'] = $start_at;

        return $this;
    }

    /**
     * Gets end_at
     *
     * @return \DateTime
     */
    public function getEndAt()
    {
        return $this->container['end_at'];
    }

    /**
     * Sets end_at
     *
     * @param \DateTime $end_at The new date and time (ISO 8601 format) when the appointment is set to end.
     *
     * @return self
     */
    public function setEndAt($end_at)
    {
        if ((mb_strlen($end_at) > 255)) {
            throw new \InvalidArgumentException('invalid length for $end_at when calling AppointmentReschedulePutPayload., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($end_at) < 0)) {
            throw new \InvalidArgumentException('invalid length for $end_at when calling AppointmentReschedulePutPayload., must be bigger than or equal to 0.');
        }

        $this->container['end_at'] = $end_at;

        return $this;
    }

    /**
     * Gets notify_customer
     *
     * @return bool|null
     */
    public function getNotifyCustomer()
    {
        return $this->container['notify_customer'];
    }

    /**
     * Sets notify_customer
     *
     * @param bool|null $notify_customer Send a notification to the appointment's order's customer that the appointment was rescheduled.
     *
     * @return self
     */
    public function setNotifyCustomer($notify_customer)
    {
        $this->container['notify_customer'] = $notify_customer;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


