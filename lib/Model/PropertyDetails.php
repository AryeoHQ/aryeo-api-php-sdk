<?php
/**
 * PropertyDetails
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Aryeo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Aryeo
 *
 * Contact: jarrod@aryeo.com
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aryeo\Model;

use \ArrayAccess;
use \Aryeo\ObjectSerializer;

/**
 * PropertyDetails Class Doc Comment
 *
 * @category Class
 * @description Details about a real-estate listing.
 * @package  Aryeo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PropertyDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PropertyDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'price' => 'int',
        'mls_number' => 'string',
        'bedrooms' => 'int',
        'bathrooms' => 'float',
        'square_feet' => 'float',
        'lot_acres' => 'float',
        'parking_spots' => 'int',
        'year_built' => 'int',
        'property_type' => 'string',
        'description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'price' => null,
        'mls_number' => null,
        'bedrooms' => null,
        'bathrooms' => null,
        'square_feet' => null,
        'lot_acres' => null,
        'parking_spots' => null,
        'year_built' => null,
        'property_type' => null,
        'description' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'price' => 'price',
        'mls_number' => 'mls_number',
        'bedrooms' => 'bedrooms',
        'bathrooms' => 'bathrooms',
        'square_feet' => 'square_feet',
        'lot_acres' => 'lot_acres',
        'parking_spots' => 'parking_spots',
        'year_built' => 'year_built',
        'property_type' => 'property_type',
        'description' => 'description'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'price' => 'setPrice',
        'mls_number' => 'setMlsNumber',
        'bedrooms' => 'setBedrooms',
        'bathrooms' => 'setBathrooms',
        'square_feet' => 'setSquareFeet',
        'lot_acres' => 'setLotAcres',
        'parking_spots' => 'setParkingSpots',
        'year_built' => 'setYearBuilt',
        'property_type' => 'setPropertyType',
        'description' => 'setDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'price' => 'getPrice',
        'mls_number' => 'getMlsNumber',
        'bedrooms' => 'getBedrooms',
        'bathrooms' => 'getBathrooms',
        'square_feet' => 'getSquareFeet',
        'lot_acres' => 'getLotAcres',
        'parking_spots' => 'getParkingSpots',
        'year_built' => 'getYearBuilt',
        'property_type' => 'getPropertyType',
        'description' => 'getDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const PROPERTY_TYPE_SINGLE_FAMILY = 'Single Family';
    const PROPERTY_TYPE_SINGLE_FAMILY_ATTACHED = 'Single Family Attached';
    const PROPERTY_TYPE_SINGLE_FAMILY_DETACHED = 'Single Family Detached';
    const PROPERTY_TYPE_COLONIAL = 'Colonial';
    const PROPERTY_TYPE_CONDO = 'Condo';
    const PROPERTY_TYPE_TOWNHOME = 'Townhome';
    const PROPERTY_TYPE_TWINHOME = 'Twinhome';
    const PROPERTY_TYPE_DUPLEX = 'Duplex';
    const PROPERTY_TYPE_LOT = 'Lot';
    const PROPERTY_TYPE_LAND = 'Land';
    const PROPERTY_TYPE_MANUFACTURED_HOME = 'Manufactured Home';
    const PROPERTY_TYPE_SEMI_DETACHED = 'Semi-Detached';
    const PROPERTY_TYPE_RENTAL = 'Rental';
    const PROPERTY_TYPE_ROW_HOUSE = 'Row House';
    const PROPERTY_TYPE_HORSE_FARM = 'Horse Farm';
    const PROPERTY_TYPE_OTHER = 'Other';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPropertyTypeAllowableValues()
    {
        return [
            self::PROPERTY_TYPE_SINGLE_FAMILY,
            self::PROPERTY_TYPE_SINGLE_FAMILY_ATTACHED,
            self::PROPERTY_TYPE_SINGLE_FAMILY_DETACHED,
            self::PROPERTY_TYPE_COLONIAL,
            self::PROPERTY_TYPE_CONDO,
            self::PROPERTY_TYPE_TOWNHOME,
            self::PROPERTY_TYPE_TWINHOME,
            self::PROPERTY_TYPE_DUPLEX,
            self::PROPERTY_TYPE_LOT,
            self::PROPERTY_TYPE_LAND,
            self::PROPERTY_TYPE_MANUFACTURED_HOME,
            self::PROPERTY_TYPE_SEMI_DETACHED,
            self::PROPERTY_TYPE_RENTAL,
            self::PROPERTY_TYPE_ROW_HOUSE,
            self::PROPERTY_TYPE_HORSE_FARM,
            self::PROPERTY_TYPE_OTHER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['price'] = $data['price'] ?? null;
        $this->container['mls_number'] = $data['mls_number'] ?? null;
        $this->container['bedrooms'] = $data['bedrooms'] ?? null;
        $this->container['bathrooms'] = $data['bathrooms'] ?? null;
        $this->container['square_feet'] = $data['square_feet'] ?? null;
        $this->container['lot_acres'] = $data['lot_acres'] ?? null;
        $this->container['parking_spots'] = $data['parking_spots'] ?? null;
        $this->container['year_built'] = $data['year_built'] ?? null;
        $this->container['property_type'] = $data['property_type'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['mls_number']) && (mb_strlen($this->container['mls_number']) > 255)) {
            $invalidProperties[] = "invalid value for 'mls_number', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['mls_number']) && (mb_strlen($this->container['mls_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'mls_number', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getPropertyTypeAllowableValues();
        if (!is_null($this->container['property_type']) && !in_array($this->container['property_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'property_type', must be one of '%s'",
                $this->container['property_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['property_type']) && (mb_strlen($this->container['property_type']) > 255)) {
            $invalidProperties[] = "invalid value for 'property_type', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['property_type']) && (mb_strlen($this->container['property_type']) < 0)) {
            $invalidProperties[] = "invalid value for 'property_type', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 65535)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) < 1)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets price
     *
     * @return int|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param int|null $price The price of the property in dollars.
     *
     * @return self
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets mls_number
     *
     * @return string|null
     */
    public function getMlsNumber()
    {
        return $this->container['mls_number'];
    }

    /**
     * Sets mls_number
     *
     * @param string|null $mls_number A number assigned to a real-estate listing for the purposes of information sharing.
     *
     * @return self
     */
    public function setMlsNumber($mls_number)
    {
        if (!is_null($mls_number) && (mb_strlen($mls_number) > 255)) {
            throw new \InvalidArgumentException('invalid length for $mls_number when calling PropertyDetails., must be smaller than or equal to 255.');
        }
        if (!is_null($mls_number) && (mb_strlen($mls_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $mls_number when calling PropertyDetails., must be bigger than or equal to 1.');
        }

        $this->container['mls_number'] = $mls_number;

        return $this;
    }

    /**
     * Gets bedrooms
     *
     * @return int|null
     */
    public function getBedrooms()
    {
        return $this->container['bedrooms'];
    }

    /**
     * Sets bedrooms
     *
     * @param int|null $bedrooms Number of bedrooms.
     *
     * @return self
     */
    public function setBedrooms($bedrooms)
    {
        $this->container['bedrooms'] = $bedrooms;

        return $this;
    }

    /**
     * Gets bathrooms
     *
     * @return float|null
     */
    public function getBathrooms()
    {
        return $this->container['bathrooms'];
    }

    /**
     * Sets bathrooms
     *
     * @param float|null $bathrooms Number of bathrooms. Represented as a number in order to support half-baths.
     *
     * @return self
     */
    public function setBathrooms($bathrooms)
    {
        $this->container['bathrooms'] = $bathrooms;

        return $this;
    }

    /**
     * Gets square_feet
     *
     * @return float|null
     */
    public function getSquareFeet()
    {
        return $this->container['square_feet'];
    }

    /**
     * Sets square_feet
     *
     * @param float|null $square_feet Total number of square feet.
     *
     * @return self
     */
    public function setSquareFeet($square_feet)
    {
        $this->container['square_feet'] = $square_feet;

        return $this;
    }

    /**
     * Gets lot_acres
     *
     * @return float|null
     */
    public function getLotAcres()
    {
        return $this->container['lot_acres'];
    }

    /**
     * Sets lot_acres
     *
     * @param float|null $lot_acres Total acres.
     *
     * @return self
     */
    public function setLotAcres($lot_acres)
    {
        $this->container['lot_acres'] = $lot_acres;

        return $this;
    }

    /**
     * Gets parking_spots
     *
     * @return int|null
     */
    public function getParkingSpots()
    {
        return $this->container['parking_spots'];
    }

    /**
     * Sets parking_spots
     *
     * @param int|null $parking_spots Number of parking spaces.
     *
     * @return self
     */
    public function setParkingSpots($parking_spots)
    {
        $this->container['parking_spots'] = $parking_spots;

        return $this;
    }

    /**
     * Gets year_built
     *
     * @return int|null
     */
    public function getYearBuilt()
    {
        return $this->container['year_built'];
    }

    /**
     * Sets year_built
     *
     * @param int|null $year_built Year the property was built.
     *
     * @return self
     */
    public function setYearBuilt($year_built)
    {
        $this->container['year_built'] = $year_built;

        return $this;
    }

    /**
     * Gets property_type
     *
     * @return string|null
     */
    public function getPropertyType()
    {
        return $this->container['property_type'];
    }

    /**
     * Sets property_type
     *
     * @param string|null $property_type Type of property.
     *
     * @return self
     */
    public function setPropertyType($property_type)
    {
        $allowedValues = $this->getPropertyTypeAllowableValues();
        if (!is_null($property_type) && !in_array($property_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'property_type', must be one of '%s'",
                    $property_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        if (!is_null($property_type) && (mb_strlen($property_type) > 255)) {
            throw new \InvalidArgumentException('invalid length for $property_type when calling PropertyDetails., must be smaller than or equal to 255.');
        }
        if (!is_null($property_type) && (mb_strlen($property_type) < 0)) {
            throw new \InvalidArgumentException('invalid length for $property_type when calling PropertyDetails., must be bigger than or equal to 0.');
        }

        $this->container['property_type'] = $property_type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Property description.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 65535)) {
            throw new \InvalidArgumentException('invalid length for $description when calling PropertyDetails., must be smaller than or equal to 65535.');
        }
        if (!is_null($description) && (mb_strlen($description) < 1)) {
            throw new \InvalidArgumentException('invalid length for $description when calling PropertyDetails., must be bigger than or equal to 1.');
        }

        $this->container['description'] = $description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


