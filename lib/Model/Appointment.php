<?php
/**
 * Appointment
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Aryeo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Aryeo
 *
 * Contact: jarrod@aryeo.com
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aryeo\Model;

use \ArrayAccess;
use \Aryeo\ObjectSerializer;

/**
 * Appointment Class Doc Comment
 *
 * @category Class
 * @description An appointment.
 * @package  Aryeo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Appointment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Appointment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'status' => 'string',
        'title' => 'string',
        'description' => 'string',
        'start_at' => '\DateTime',
        'end_at' => '\DateTime',
        'duration' => 'int',
        'order' => '\Aryeo\Model\Order',
        'users' => '\Aryeo\Model\User[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'status' => null,
        'title' => null,
        'description' => null,
        'start_at' => 'date-time',
        'end_at' => 'date-time',
        'duration' => null,
        'order' => null,
        'users' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'status' => 'status',
        'title' => 'title',
        'description' => 'description',
        'start_at' => 'start_at',
        'end_at' => 'end_at',
        'duration' => 'duration',
        'order' => 'order',
        'users' => 'users'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'status' => 'setStatus',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'start_at' => 'setStartAt',
        'end_at' => 'setEndAt',
        'duration' => 'setDuration',
        'order' => 'setOrder',
        'users' => 'setUsers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'status' => 'getStatus',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'start_at' => 'getStartAt',
        'end_at' => 'getEndAt',
        'duration' => 'getDuration',
        'order' => 'getOrder',
        'users' => 'getUsers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_SCHEDULED = 'SCHEDULED';
    const STATUS_UNSCHEDULED = 'UNSCHEDULED';
    const STATUS_RESCHEDULED = 'RESCHEDULED';
    const STATUS_CANCELED = 'CANCELED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_SCHEDULED,
            self::STATUS_UNSCHEDULED,
            self::STATUS_RESCHEDULED,
            self::STATUS_CANCELED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['start_at'] = $data['start_at'] ?? null;
        $this->container['end_at'] = $data['end_at'] ?? null;
        $this->container['duration'] = $data['duration'] ?? null;
        $this->container['order'] = $data['order'] ?? null;
        $this->container['users'] = $data['users'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ((mb_strlen($this->container['id']) > 255)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['id']) < 0)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['status']) && (mb_strlen($this->container['status']) > 255)) {
            $invalidProperties[] = "invalid value for 'status', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['status']) && (mb_strlen($this->container['status']) < 0)) {
            $invalidProperties[] = "invalid value for 'status', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['title']) && (mb_strlen($this->container['title']) > 65536)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 65536.";
        }

        if (!is_null($this->container['title']) && (mb_strlen($this->container['title']) < 0)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 65536)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 65536.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) < 0)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['start_at']) && (mb_strlen($this->container['start_at']) > 255)) {
            $invalidProperties[] = "invalid value for 'start_at', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['start_at']) && (mb_strlen($this->container['start_at']) < 0)) {
            $invalidProperties[] = "invalid value for 'start_at', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['end_at']) && (mb_strlen($this->container['end_at']) > 255)) {
            $invalidProperties[] = "invalid value for 'end_at', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['end_at']) && (mb_strlen($this->container['end_at']) < 0)) {
            $invalidProperties[] = "invalid value for 'end_at', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The ID of the appointment.
     *
     * @return self
     */
    public function setId($id)
    {
        if ((mb_strlen($id) > 255)) {
            throw new \InvalidArgumentException('invalid length for $id when calling Appointment., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $id when calling Appointment., must be bigger than or equal to 0.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The status of the appointment.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        if (!is_null($status) && (mb_strlen($status) > 255)) {
            throw new \InvalidArgumentException('invalid length for $status when calling Appointment., must be smaller than or equal to 255.');
        }
        if (!is_null($status) && (mb_strlen($status) < 0)) {
            throw new \InvalidArgumentException('invalid length for $status when calling Appointment., must be bigger than or equal to 0.');
        }

        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title The title of the appointment.
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (!is_null($title) && (mb_strlen($title) > 65536)) {
            throw new \InvalidArgumentException('invalid length for $title when calling Appointment., must be smaller than or equal to 65536.');
        }
        if (!is_null($title) && (mb_strlen($title) < 0)) {
            throw new \InvalidArgumentException('invalid length for $title when calling Appointment., must be bigger than or equal to 0.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The multi-line description of the appointment.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 65536)) {
            throw new \InvalidArgumentException('invalid length for $description when calling Appointment., must be smaller than or equal to 65536.');
        }
        if (!is_null($description) && (mb_strlen($description) < 0)) {
            throw new \InvalidArgumentException('invalid length for $description when calling Appointment., must be bigger than or equal to 0.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets start_at
     *
     * @return \DateTime|null
     */
    public function getStartAt()
    {
        return $this->container['start_at'];
    }

    /**
     * Sets start_at
     *
     * @param \DateTime|null $start_at The date and time (ISO 8601 format) when the appointment is set to start.
     *
     * @return self
     */
    public function setStartAt($start_at)
    {
        if (!is_null($start_at) && (mb_strlen($start_at) > 255)) {
            throw new \InvalidArgumentException('invalid length for $start_at when calling Appointment., must be smaller than or equal to 255.');
        }
        if (!is_null($start_at) && (mb_strlen($start_at) < 0)) {
            throw new \InvalidArgumentException('invalid length for $start_at when calling Appointment., must be bigger than or equal to 0.');
        }

        $this->container['start_at'] = $start_at;

        return $this;
    }

    /**
     * Gets end_at
     *
     * @return \DateTime|null
     */
    public function getEndAt()
    {
        return $this->container['end_at'];
    }

    /**
     * Sets end_at
     *
     * @param \DateTime|null $end_at The date and time (ISO 8601 format) when the appointment is set to end.
     *
     * @return self
     */
    public function setEndAt($end_at)
    {
        if (!is_null($end_at) && (mb_strlen($end_at) > 255)) {
            throw new \InvalidArgumentException('invalid length for $end_at when calling Appointment., must be smaller than or equal to 255.');
        }
        if (!is_null($end_at) && (mb_strlen($end_at) < 0)) {
            throw new \InvalidArgumentException('invalid length for $end_at when calling Appointment., must be bigger than or equal to 0.');
        }

        $this->container['end_at'] = $end_at;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return int|null
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int|null $duration The length of the appointment in minutes.
     *
     * @return self
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets order
     *
     * @return \Aryeo\Model\Order|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param \Aryeo\Model\Order|null $order order
     *
     * @return self
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets users
     *
     * @return \Aryeo\Model\User[]|null
     */
    public function getUsers()
    {
        return $this->container['users'];
    }

    /**
     * Sets users
     *
     * @param \Aryeo\Model\User[]|null $users Users attached to the appointment.
     *
     * @return self
     */
    public function setUsers($users)
    {
        $this->container['users'] = $users;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


