<?php
/**
 * FloorPlan
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Aryeo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Aryeo
 *
 * Contact: jarrod@aryeo.com
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aryeo\Model;

use \ArrayAccess;
use \Aryeo\ObjectSerializer;

/**
 * FloorPlan Class Doc Comment
 *
 * @category Class
 * @description A scale diagram of the arrangement of a building.
 * @package  Aryeo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class FloorPlan implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FloorPlan';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'original_url' => 'string',
        'large_url' => 'string',
        'thumbnail_url' => 'string',
        'title' => 'string',
        'index' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'original_url' => 'uri',
        'large_url' => 'uri',
        'thumbnail_url' => 'uri',
        'title' => null,
        'index' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'original_url' => 'original_url',
        'large_url' => 'large_url',
        'thumbnail_url' => 'thumbnail_url',
        'title' => 'title',
        'index' => 'index'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'original_url' => 'setOriginalUrl',
        'large_url' => 'setLargeUrl',
        'thumbnail_url' => 'setThumbnailUrl',
        'title' => 'setTitle',
        'index' => 'setIndex'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'original_url' => 'getOriginalUrl',
        'large_url' => 'getLargeUrl',
        'thumbnail_url' => 'getThumbnailUrl',
        'title' => 'getTitle',
        'index' => 'getIndex'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['original_url'] = $data['original_url'] ?? null;
        $this->container['large_url'] = $data['large_url'] ?? null;
        $this->container['thumbnail_url'] = $data['thumbnail_url'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['index'] = $data['index'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ((mb_strlen($this->container['id']) > 36)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be smaller than or equal to 36.";
        }

        if ((mb_strlen($this->container['id']) < 36)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 36.";
        }

        if ($this->container['original_url'] === null) {
            $invalidProperties[] = "'original_url' can't be null";
        }
        if ((mb_strlen($this->container['original_url']) > 65535)) {
            $invalidProperties[] = "invalid value for 'original_url', the character length must be smaller than or equal to 65535.";
        }

        if ((mb_strlen($this->container['original_url']) < 1)) {
            $invalidProperties[] = "invalid value for 'original_url', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['large_url'] === null) {
            $invalidProperties[] = "'large_url' can't be null";
        }
        if ((mb_strlen($this->container['large_url']) > 65535)) {
            $invalidProperties[] = "invalid value for 'large_url', the character length must be smaller than or equal to 65535.";
        }

        if ((mb_strlen($this->container['large_url']) < 1)) {
            $invalidProperties[] = "invalid value for 'large_url', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['thumbnail_url'] === null) {
            $invalidProperties[] = "'thumbnail_url' can't be null";
        }
        if ((mb_strlen($this->container['thumbnail_url']) > 65535)) {
            $invalidProperties[] = "invalid value for 'thumbnail_url', the character length must be smaller than or equal to 65535.";
        }

        if ((mb_strlen($this->container['thumbnail_url']) < 1)) {
            $invalidProperties[] = "invalid value for 'thumbnail_url', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['title']) && (mb_strlen($this->container['title']) > 255)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['title']) && (mb_strlen($this->container['title']) < 1)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['index']) && ($this->container['index'] < 0)) {
            $invalidProperties[] = "invalid value for 'index', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id ID of the floor plan. UUID Version 4.
     *
     * @return self
     */
    public function setId($id)
    {
        if ((mb_strlen($id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $id when calling FloorPlan., must be smaller than or equal to 36.');
        }
        if ((mb_strlen($id) < 36)) {
            throw new \InvalidArgumentException('invalid length for $id when calling FloorPlan., must be bigger than or equal to 36.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets original_url
     *
     * @return string
     */
    public function getOriginalUrl()
    {
        return $this->container['original_url'];
    }

    /**
     * Sets original_url
     *
     * @param string $original_url A URL for the original, full-resolution version of the floor plan. Useful for downloading.
     *
     * @return self
     */
    public function setOriginalUrl($original_url)
    {
        if ((mb_strlen($original_url) > 65535)) {
            throw new \InvalidArgumentException('invalid length for $original_url when calling FloorPlan., must be smaller than or equal to 65535.');
        }
        if ((mb_strlen($original_url) < 1)) {
            throw new \InvalidArgumentException('invalid length for $original_url when calling FloorPlan., must be bigger than or equal to 1.');
        }

        $this->container['original_url'] = $original_url;

        return $this;
    }

    /**
     * Gets large_url
     *
     * @return string
     */
    public function getLargeUrl()
    {
        return $this->container['large_url'];
    }

    /**
     * Sets large_url
     *
     * @param string $large_url A URL for a large version of the floor plan.
     *
     * @return self
     */
    public function setLargeUrl($large_url)
    {
        if ((mb_strlen($large_url) > 65535)) {
            throw new \InvalidArgumentException('invalid length for $large_url when calling FloorPlan., must be smaller than or equal to 65535.');
        }
        if ((mb_strlen($large_url) < 1)) {
            throw new \InvalidArgumentException('invalid length for $large_url when calling FloorPlan., must be bigger than or equal to 1.');
        }

        $this->container['large_url'] = $large_url;

        return $this;
    }

    /**
     * Gets thumbnail_url
     *
     * @return string
     */
    public function getThumbnailUrl()
    {
        return $this->container['thumbnail_url'];
    }

    /**
     * Sets thumbnail_url
     *
     * @param string $thumbnail_url A URL for a thumbnail-sized version of the floor plan.
     *
     * @return self
     */
    public function setThumbnailUrl($thumbnail_url)
    {
        if ((mb_strlen($thumbnail_url) > 65535)) {
            throw new \InvalidArgumentException('invalid length for $thumbnail_url when calling FloorPlan., must be smaller than or equal to 65535.');
        }
        if ((mb_strlen($thumbnail_url) < 1)) {
            throw new \InvalidArgumentException('invalid length for $thumbnail_url when calling FloorPlan., must be bigger than or equal to 1.');
        }

        $this->container['thumbnail_url'] = $thumbnail_url;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title The title (or caption) of the floor plan.
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (!is_null($title) && (mb_strlen($title) > 255)) {
            throw new \InvalidArgumentException('invalid length for $title when calling FloorPlan., must be smaller than or equal to 255.');
        }
        if (!is_null($title) && (mb_strlen($title) < 1)) {
            throw new \InvalidArgumentException('invalid length for $title when calling FloorPlan., must be bigger than or equal to 1.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets index
     *
     * @return int|null
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     *
     * @param int|null $index Index order position of the floor plan.
     *
     * @return self
     */
    public function setIndex($index)
    {

        if (!is_null($index) && ($index < 0)) {
            throw new \InvalidArgumentException('invalid value for $index when calling FloorPlan., must be bigger than or equal to 0.');
        }

        $this->container['index'] = $index;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


