<?php
/**
 * Video
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Aryeo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Aryeo
 *
 * Contact: jarrod@aryeo.com
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aryeo\Model;

use \ArrayAccess;
use \Aryeo\ObjectSerializer;

/**
 * Video Class Doc Comment
 *
 * @category Class
 * @description A recording of moving visual images. Provided either as a download URL (MP4) or a link (e.g. YouTube, Vimeo).
 * @package  Aryeo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Video implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Video';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'title' => 'string',
        'duration' => 'int',
        'display_type' => 'string',
        'source_type' => 'string',
        'thumbnail_url' => 'string',
        'playback_url' => 'string',
        'download_url' => 'string',
        'share_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'title' => null,
        'duration' => null,
        'display_type' => null,
        'source_type' => null,
        'thumbnail_url' => 'uri',
        'playback_url' => 'uri',
        'download_url' => 'uri',
        'share_url' => 'uri'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'title' => 'title',
        'duration' => 'duration',
        'display_type' => 'display_type',
        'source_type' => 'source_type',
        'thumbnail_url' => 'thumbnail_url',
        'playback_url' => 'playback_url',
        'download_url' => 'download_url',
        'share_url' => 'share_url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'title' => 'setTitle',
        'duration' => 'setDuration',
        'display_type' => 'setDisplayType',
        'source_type' => 'setSourceType',
        'thumbnail_url' => 'setThumbnailUrl',
        'playback_url' => 'setPlaybackUrl',
        'download_url' => 'setDownloadUrl',
        'share_url' => 'setShareUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'title' => 'getTitle',
        'duration' => 'getDuration',
        'display_type' => 'getDisplayType',
        'source_type' => 'getSourceType',
        'thumbnail_url' => 'getThumbnailUrl',
        'playback_url' => 'getPlaybackUrl',
        'download_url' => 'getDownloadUrl',
        'share_url' => 'getShareUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const DISPLAY_TYPE_BRANDED = 'BRANDED';
    const DISPLAY_TYPE_UNBRANDED = 'UNBRANDED';
    const DISPLAY_TYPE_BOTH = 'BOTH';
    const DISPLAY_TYPE_NONE = 'NONE';
    const SOURCE_TYPE_YOUTUBE = 'YOUTUBE';
    const SOURCE_TYPE_VIMEO = 'VIMEO';
    const SOURCE_TYPE_OPTIMIZED = 'OPTIMIZED';
    const SOURCE_TYPE_UPLOADED = 'UPLOADED';
    const SOURCE_TYPE_LINK = 'LINK';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDisplayTypeAllowableValues()
    {
        return [
            self::DISPLAY_TYPE_BRANDED,
            self::DISPLAY_TYPE_UNBRANDED,
            self::DISPLAY_TYPE_BOTH,
            self::DISPLAY_TYPE_NONE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourceTypeAllowableValues()
    {
        return [
            self::SOURCE_TYPE_YOUTUBE,
            self::SOURCE_TYPE_VIMEO,
            self::SOURCE_TYPE_OPTIMIZED,
            self::SOURCE_TYPE_UPLOADED,
            self::SOURCE_TYPE_LINK,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['duration'] = $data['duration'] ?? null;
        $this->container['display_type'] = $data['display_type'] ?? null;
        $this->container['source_type'] = $data['source_type'] ?? null;
        $this->container['thumbnail_url'] = $data['thumbnail_url'] ?? null;
        $this->container['playback_url'] = $data['playback_url'] ?? null;
        $this->container['download_url'] = $data['download_url'] ?? null;
        $this->container['share_url'] = $data['share_url'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ((mb_strlen($this->container['id']) > 255)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['id']) < 0)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['title']) && (mb_strlen($this->container['title']) > 255)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['title']) && (mb_strlen($this->container['title']) < 1)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['display_type'] === null) {
            $invalidProperties[] = "'display_type' can't be null";
        }
        $allowedValues = $this->getDisplayTypeAllowableValues();
        if (!is_null($this->container['display_type']) && !in_array($this->container['display_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'display_type', must be one of '%s'",
                $this->container['display_type'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['display_type']) > 255)) {
            $invalidProperties[] = "invalid value for 'display_type', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['display_type']) < 1)) {
            $invalidProperties[] = "invalid value for 'display_type', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['source_type'] === null) {
            $invalidProperties[] = "'source_type' can't be null";
        }
        $allowedValues = $this->getSourceTypeAllowableValues();
        if (!is_null($this->container['source_type']) && !in_array($this->container['source_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'source_type', must be one of '%s'",
                $this->container['source_type'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['source_type']) > 255)) {
            $invalidProperties[] = "invalid value for 'source_type', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['source_type']) < 1)) {
            $invalidProperties[] = "invalid value for 'source_type', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['thumbnail_url'] === null) {
            $invalidProperties[] = "'thumbnail_url' can't be null";
        }
        if ((mb_strlen($this->container['thumbnail_url']) > 65535)) {
            $invalidProperties[] = "invalid value for 'thumbnail_url', the character length must be smaller than or equal to 65535.";
        }

        if ((mb_strlen($this->container['thumbnail_url']) < 0)) {
            $invalidProperties[] = "invalid value for 'thumbnail_url', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['playback_url'] === null) {
            $invalidProperties[] = "'playback_url' can't be null";
        }
        if ((mb_strlen($this->container['playback_url']) > 65535)) {
            $invalidProperties[] = "invalid value for 'playback_url', the character length must be smaller than or equal to 65535.";
        }

        if ((mb_strlen($this->container['playback_url']) < 0)) {
            $invalidProperties[] = "invalid value for 'playback_url', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['download_url']) && (mb_strlen($this->container['download_url']) > 65535)) {
            $invalidProperties[] = "invalid value for 'download_url', the character length must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['download_url']) && (mb_strlen($this->container['download_url']) < 1)) {
            $invalidProperties[] = "invalid value for 'download_url', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['share_url']) && (mb_strlen($this->container['share_url']) > 65535)) {
            $invalidProperties[] = "invalid value for 'share_url', the character length must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['share_url']) && (mb_strlen($this->container['share_url']) < 0)) {
            $invalidProperties[] = "invalid value for 'share_url', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id ID of the video.
     *
     * @return self
     */
    public function setId($id)
    {
        if ((mb_strlen($id) > 255)) {
            throw new \InvalidArgumentException('invalid length for $id when calling Video., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $id when calling Video., must be bigger than or equal to 0.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title The title of the video given by the uploading user.
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (!is_null($title) && (mb_strlen($title) > 255)) {
            throw new \InvalidArgumentException('invalid length for $title when calling Video., must be smaller than or equal to 255.');
        }
        if (!is_null($title) && (mb_strlen($title) < 1)) {
            throw new \InvalidArgumentException('invalid length for $title when calling Video., must be bigger than or equal to 1.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return int|null
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int|null $duration The video's runtime in seconds.
     *
     * @return self
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets display_type
     *
     * @return string
     */
    public function getDisplayType()
    {
        return $this->container['display_type'];
    }

    /**
     * Sets display_type
     *
     * @param string $display_type The display type determines if the video is branded or unbranded (can also be none or both). This affects whether the video is displayed on branded or unbranded marketing materials such as the property website.
     *
     * @return self
     */
    public function setDisplayType($display_type)
    {
        $allowedValues = $this->getDisplayTypeAllowableValues();
        if (!in_array($display_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'display_type', must be one of '%s'",
                    $display_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($display_type) > 255)) {
            throw new \InvalidArgumentException('invalid length for $display_type when calling Video., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($display_type) < 1)) {
            throw new \InvalidArgumentException('invalid length for $display_type when calling Video., must be bigger than or equal to 1.');
        }

        $this->container['display_type'] = $display_type;

        return $this;
    }

    /**
     * Gets source_type
     *
     * @return string
     */
    public function getSourceType()
    {
        return $this->container['source_type'];
    }

    /**
     * Sets source_type
     *
     * @param string $source_type The original upload source of the video, used to determine how to handle the playback_url of the video and other display properties.
     *
     * @return self
     */
    public function setSourceType($source_type)
    {
        $allowedValues = $this->getSourceTypeAllowableValues();
        if (!in_array($source_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'source_type', must be one of '%s'",
                    $source_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($source_type) > 255)) {
            throw new \InvalidArgumentException('invalid length for $source_type when calling Video., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($source_type) < 1)) {
            throw new \InvalidArgumentException('invalid length for $source_type when calling Video., must be bigger than or equal to 1.');
        }

        $this->container['source_type'] = $source_type;

        return $this;
    }

    /**
     * Gets thumbnail_url
     *
     * @return string
     */
    public function getThumbnailUrl()
    {
        return $this->container['thumbnail_url'];
    }

    /**
     * Sets thumbnail_url
     *
     * @param string $thumbnail_url A thumbnail image URL for the video.
     *
     * @return self
     */
    public function setThumbnailUrl($thumbnail_url)
    {
        if ((mb_strlen($thumbnail_url) > 65535)) {
            throw new \InvalidArgumentException('invalid length for $thumbnail_url when calling Video., must be smaller than or equal to 65535.');
        }
        if ((mb_strlen($thumbnail_url) < 0)) {
            throw new \InvalidArgumentException('invalid length for $thumbnail_url when calling Video., must be bigger than or equal to 0.');
        }

        $this->container['thumbnail_url'] = $thumbnail_url;

        return $this;
    }

    /**
     * Gets playback_url
     *
     * @return string
     */
    public function getPlaybackUrl()
    {
        return $this->container['playback_url'];
    }

    /**
     * Sets playback_url
     *
     * @param string $playback_url A URL linking to playback stream of the video.
     *
     * @return self
     */
    public function setPlaybackUrl($playback_url)
    {
        if ((mb_strlen($playback_url) > 65535)) {
            throw new \InvalidArgumentException('invalid length for $playback_url when calling Video., must be smaller than or equal to 65535.');
        }
        if ((mb_strlen($playback_url) < 0)) {
            throw new \InvalidArgumentException('invalid length for $playback_url when calling Video., must be bigger than or equal to 0.');
        }

        $this->container['playback_url'] = $playback_url;

        return $this;
    }

    /**
     * Gets download_url
     *
     * @return string|null
     */
    public function getDownloadUrl()
    {
        return $this->container['download_url'];
    }

    /**
     * Sets download_url
     *
     * @param string|null $download_url A URL for downloading the video.
     *
     * @return self
     */
    public function setDownloadUrl($download_url)
    {
        if (!is_null($download_url) && (mb_strlen($download_url) > 65535)) {
            throw new \InvalidArgumentException('invalid length for $download_url when calling Video., must be smaller than or equal to 65535.');
        }
        if (!is_null($download_url) && (mb_strlen($download_url) < 1)) {
            throw new \InvalidArgumentException('invalid length for $download_url when calling Video., must be bigger than or equal to 1.');
        }

        $this->container['download_url'] = $download_url;

        return $this;
    }

    /**
     * Gets share_url
     *
     * @return string|null
     */
    public function getShareUrl()
    {
        return $this->container['share_url'];
    }

    /**
     * Sets share_url
     *
     * @param string|null $share_url A URL linking to a public viewing optimized webpage the video.
     *
     * @return self
     */
    public function setShareUrl($share_url)
    {
        if (!is_null($share_url) && (mb_strlen($share_url) > 65535)) {
            throw new \InvalidArgumentException('invalid length for $share_url when calling Video., must be smaller than or equal to 65535.');
        }
        if (!is_null($share_url) && (mb_strlen($share_url) < 0)) {
            throw new \InvalidArgumentException('invalid length for $share_url when calling Video., must be bigger than or equal to 0.');
        }

        $this->container['share_url'] = $share_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


