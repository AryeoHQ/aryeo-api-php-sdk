<?php
/**
 * SocialProfiles
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Aryeo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Aryeo
 *
 * Contact: jarrod@aryeo.com
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aryeo\Model;

use \ArrayAccess;
use \Aryeo\ObjectSerializer;

/**
 * SocialProfiles Class Doc Comment
 *
 * @category Class
 * @description External profile URLs for an agent or brokerage group.
 * @package  Aryeo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SocialProfiles implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SocialProfiles';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'facebook_profile_url' => 'string',
        'instagram_profile_url' => 'string',
        'twitter_profile_url' => 'string',
        'linkedin_profile_url' => 'string',
        'zillow_profile_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'facebook_profile_url' => 'uri',
        'instagram_profile_url' => 'uri',
        'twitter_profile_url' => 'uri',
        'linkedin_profile_url' => 'uri',
        'zillow_profile_url' => 'uri'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'facebook_profile_url' => 'facebook_profile_url',
        'instagram_profile_url' => 'instagram_profile_url',
        'twitter_profile_url' => 'twitter_profile_url',
        'linkedin_profile_url' => 'linkedin_profile_url',
        'zillow_profile_url' => 'zillow_profile_url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'facebook_profile_url' => 'setFacebookProfileUrl',
        'instagram_profile_url' => 'setInstagramProfileUrl',
        'twitter_profile_url' => 'setTwitterProfileUrl',
        'linkedin_profile_url' => 'setLinkedinProfileUrl',
        'zillow_profile_url' => 'setZillowProfileUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'facebook_profile_url' => 'getFacebookProfileUrl',
        'instagram_profile_url' => 'getInstagramProfileUrl',
        'twitter_profile_url' => 'getTwitterProfileUrl',
        'linkedin_profile_url' => 'getLinkedinProfileUrl',
        'zillow_profile_url' => 'getZillowProfileUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['facebook_profile_url'] = $data['facebook_profile_url'] ?? null;
        $this->container['instagram_profile_url'] = $data['instagram_profile_url'] ?? null;
        $this->container['twitter_profile_url'] = $data['twitter_profile_url'] ?? null;
        $this->container['linkedin_profile_url'] = $data['linkedin_profile_url'] ?? null;
        $this->container['zillow_profile_url'] = $data['zillow_profile_url'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['facebook_profile_url']) && (mb_strlen($this->container['facebook_profile_url']) > 65535)) {
            $invalidProperties[] = "invalid value for 'facebook_profile_url', the character length must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['facebook_profile_url']) && (mb_strlen($this->container['facebook_profile_url']) < 0)) {
            $invalidProperties[] = "invalid value for 'facebook_profile_url', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['instagram_profile_url']) && (mb_strlen($this->container['instagram_profile_url']) > 65535)) {
            $invalidProperties[] = "invalid value for 'instagram_profile_url', the character length must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['instagram_profile_url']) && (mb_strlen($this->container['instagram_profile_url']) < 0)) {
            $invalidProperties[] = "invalid value for 'instagram_profile_url', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['twitter_profile_url']) && (mb_strlen($this->container['twitter_profile_url']) > 65535)) {
            $invalidProperties[] = "invalid value for 'twitter_profile_url', the character length must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['twitter_profile_url']) && (mb_strlen($this->container['twitter_profile_url']) < 0)) {
            $invalidProperties[] = "invalid value for 'twitter_profile_url', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['linkedin_profile_url']) && (mb_strlen($this->container['linkedin_profile_url']) > 65535)) {
            $invalidProperties[] = "invalid value for 'linkedin_profile_url', the character length must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['linkedin_profile_url']) && (mb_strlen($this->container['linkedin_profile_url']) < 0)) {
            $invalidProperties[] = "invalid value for 'linkedin_profile_url', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['zillow_profile_url']) && (mb_strlen($this->container['zillow_profile_url']) > 65535)) {
            $invalidProperties[] = "invalid value for 'zillow_profile_url', the character length must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['zillow_profile_url']) && (mb_strlen($this->container['zillow_profile_url']) < 0)) {
            $invalidProperties[] = "invalid value for 'zillow_profile_url', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets facebook_profile_url
     *
     * @return string|null
     */
    public function getFacebookProfileUrl()
    {
        return $this->container['facebook_profile_url'];
    }

    /**
     * Sets facebook_profile_url
     *
     * @param string|null $facebook_profile_url URL for Facebook.
     *
     * @return self
     */
    public function setFacebookProfileUrl($facebook_profile_url)
    {
        if (!is_null($facebook_profile_url) && (mb_strlen($facebook_profile_url) > 65535)) {
            throw new \InvalidArgumentException('invalid length for $facebook_profile_url when calling SocialProfiles., must be smaller than or equal to 65535.');
        }
        if (!is_null($facebook_profile_url) && (mb_strlen($facebook_profile_url) < 0)) {
            throw new \InvalidArgumentException('invalid length for $facebook_profile_url when calling SocialProfiles., must be bigger than or equal to 0.');
        }

        $this->container['facebook_profile_url'] = $facebook_profile_url;

        return $this;
    }

    /**
     * Gets instagram_profile_url
     *
     * @return string|null
     */
    public function getInstagramProfileUrl()
    {
        return $this->container['instagram_profile_url'];
    }

    /**
     * Sets instagram_profile_url
     *
     * @param string|null $instagram_profile_url URL for Instagram.
     *
     * @return self
     */
    public function setInstagramProfileUrl($instagram_profile_url)
    {
        if (!is_null($instagram_profile_url) && (mb_strlen($instagram_profile_url) > 65535)) {
            throw new \InvalidArgumentException('invalid length for $instagram_profile_url when calling SocialProfiles., must be smaller than or equal to 65535.');
        }
        if (!is_null($instagram_profile_url) && (mb_strlen($instagram_profile_url) < 0)) {
            throw new \InvalidArgumentException('invalid length for $instagram_profile_url when calling SocialProfiles., must be bigger than or equal to 0.');
        }

        $this->container['instagram_profile_url'] = $instagram_profile_url;

        return $this;
    }

    /**
     * Gets twitter_profile_url
     *
     * @return string|null
     */
    public function getTwitterProfileUrl()
    {
        return $this->container['twitter_profile_url'];
    }

    /**
     * Sets twitter_profile_url
     *
     * @param string|null $twitter_profile_url URL for Twitter.
     *
     * @return self
     */
    public function setTwitterProfileUrl($twitter_profile_url)
    {
        if (!is_null($twitter_profile_url) && (mb_strlen($twitter_profile_url) > 65535)) {
            throw new \InvalidArgumentException('invalid length for $twitter_profile_url when calling SocialProfiles., must be smaller than or equal to 65535.');
        }
        if (!is_null($twitter_profile_url) && (mb_strlen($twitter_profile_url) < 0)) {
            throw new \InvalidArgumentException('invalid length for $twitter_profile_url when calling SocialProfiles., must be bigger than or equal to 0.');
        }

        $this->container['twitter_profile_url'] = $twitter_profile_url;

        return $this;
    }

    /**
     * Gets linkedin_profile_url
     *
     * @return string|null
     */
    public function getLinkedinProfileUrl()
    {
        return $this->container['linkedin_profile_url'];
    }

    /**
     * Sets linkedin_profile_url
     *
     * @param string|null $linkedin_profile_url URL for LinkedIn.
     *
     * @return self
     */
    public function setLinkedinProfileUrl($linkedin_profile_url)
    {
        if (!is_null($linkedin_profile_url) && (mb_strlen($linkedin_profile_url) > 65535)) {
            throw new \InvalidArgumentException('invalid length for $linkedin_profile_url when calling SocialProfiles., must be smaller than or equal to 65535.');
        }
        if (!is_null($linkedin_profile_url) && (mb_strlen($linkedin_profile_url) < 0)) {
            throw new \InvalidArgumentException('invalid length for $linkedin_profile_url when calling SocialProfiles., must be bigger than or equal to 0.');
        }

        $this->container['linkedin_profile_url'] = $linkedin_profile_url;

        return $this;
    }

    /**
     * Gets zillow_profile_url
     *
     * @return string|null
     */
    public function getZillowProfileUrl()
    {
        return $this->container['zillow_profile_url'];
    }

    /**
     * Sets zillow_profile_url
     *
     * @param string|null $zillow_profile_url URL for Zillow.
     *
     * @return self
     */
    public function setZillowProfileUrl($zillow_profile_url)
    {
        if (!is_null($zillow_profile_url) && (mb_strlen($zillow_profile_url) > 65535)) {
            throw new \InvalidArgumentException('invalid length for $zillow_profile_url when calling SocialProfiles., must be smaller than or equal to 65535.');
        }
        if (!is_null($zillow_profile_url) && (mb_strlen($zillow_profile_url) < 0)) {
            throw new \InvalidArgumentException('invalid length for $zillow_profile_url when calling SocialProfiles., must be bigger than or equal to 0.');
        }

        $this->container['zillow_profile_url'] = $zillow_profile_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


