<?php
/**
 * PartialAddress
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Aryeo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Aryeo
 *
 * # Introduction The Aryeo API gives access to the Aryeo platform. You can use your favorite HTTP/REST library for interfacing with the Aryeo API, or you can use one of our SDKs. Our SDKs are procedurally generated and a great starting point for experimental testing. If there is an additional language or framework that you want to see supported, then please reach and out and make a contribution!  <p align=\"center\"> <a href=\"https://github.com/AryeoHQ/aryeo-api-dart-sdk\"><img src=\"https://raw.githubusercontent.com/AryeoHQ/aryeo-api-docs/master/public/images/dart.svg\" alt=\"Dart\" width=\"44\" style=\"padding:10px;border: 1px solid #d3d3d3;border-radius: 5px;margin:4px;\"/></a> <a href=\"https://github.com/AryeoHQ/aryeo-api-go-sdk\"><img src=\"https://raw.githubusercontent.com/AryeoHQ/aryeo-api-docs/master/public/images/go.svg\" alt=\"Go\" width=\"44\" style=\"padding:10px;border: 1px solid #d3d3d3;border-radius: 5px;margin:4px;\"/></a> <a href=\"https://github.com/AryeoHQ/aryeo-api-js-sdk\"><img src=\"https://raw.githubusercontent.com/AryeoHQ/aryeo-api-docs/master/public/images/js.svg\" alt=\"Node JS\" width=\"44\" style=\"padding:10px;border: 1px solid #d3d3d3;border-radius: 5px;margin:4px;\"/></a> <a href=\"https://github.com/AryeoHQ/aryeo-api-php-sdk\"><img src=\"https://raw.githubusercontent.com/AryeoHQ/aryeo-api-docs/master/public/images/php.svg\" alt=\"PHP\" width=\"44\" style=\"padding:10px;border: 1px solid #d3d3d3;border-radius: 5px;margin:4px;\"/></a> <a href=\"https://github.com/AryeoHQ/aryeo-api-ruby-sdk\"><img src=\"https://raw.githubusercontent.com/AryeoHQ/aryeo-api-docs/master/public/images/ruby.svg\" alt=\"Ruby\" width=\"44\" style=\"padding:10px;border: 1px solid #d3d3d3;border-radius: 5px;margin:4px;\"/></a> <a href=\"https://github.com/AryeoHQ/aryeo-api-rust-sdk\"><img src=\"https://raw.githubusercontent.com/AryeoHQ/aryeo-api-docs/master/public/images/rust.svg\" alt=\"Rust\" width=\"44\" style=\"padding:10px;border: 1px solid #d3d3d3;border-radius: 5px;margin:4px;\"/></a> <a href=\"https://github.com/AryeoHQ/aryeo-api-swift-sdk\"><img src=\"https://raw.githubusercontent.com/AryeoHQ/aryeo-api-docs/master/public/images/swift.svg\" alt=\"Swift\" width=\"44\" style=\"padding:10px;border: 1px solid #d3d3d3;border-radius: 5px;margin:4px;\"/></a> </p>  **Note**: Some SDKs may require you to manually add the `Accept` header to all Aryeo API requests. If so, use the value `application/json`.  # Authentication To start using the Aryeo API, you will need to generate an API key from your group's developer settings. You can then authenticate to the Aryeo API by providing your key in the appropriate request header. Requests made without an API key will result in a `401 Unauthorized` error.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jarrod@aryeo.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aryeo\Model;

use \ArrayAccess;
use \Aryeo\ObjectSerializer;

/**
 * PartialAddress Class Doc Comment
 *
 * @category Class
 * @description A structure containing a street address and additional metadata about a location.
 * @package  Aryeo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PartialAddress implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PartialAddress';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'full_address' => 'string',
        'formatted_address_1' => 'string',
        'formatted_address_2' => 'string',
        'latitude' => 'double',
        'longitude' => 'double',
        'place_id' => 'string',
        'address_line_1' => 'string',
        'address_line_2' => 'string',
        'city' => 'string',
        'state' => 'string',
        'postal_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'full_address' => null,
        'formatted_address_1' => null,
        'formatted_address_2' => null,
        'latitude' => 'double',
        'longitude' => 'double',
        'place_id' => null,
        'address_line_1' => null,
        'address_line_2' => null,
        'city' => null,
        'state' => null,
        'postal_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'full_address' => 'full_address',
        'formatted_address_1' => 'formatted_address_1',
        'formatted_address_2' => 'formatted_address_2',
        'latitude' => 'latitude',
        'longitude' => 'longitude',
        'place_id' => 'place_id',
        'address_line_1' => 'address_line_1',
        'address_line_2' => 'address_line_2',
        'city' => 'city',
        'state' => 'state',
        'postal_code' => 'postal_code'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'full_address' => 'setFullAddress',
        'formatted_address_1' => 'setFormattedAddress1',
        'formatted_address_2' => 'setFormattedAddress2',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude',
        'place_id' => 'setPlaceId',
        'address_line_1' => 'setAddressLine1',
        'address_line_2' => 'setAddressLine2',
        'city' => 'setCity',
        'state' => 'setState',
        'postal_code' => 'setPostalCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'full_address' => 'getFullAddress',
        'formatted_address_1' => 'getFormattedAddress1',
        'formatted_address_2' => 'getFormattedAddress2',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude',
        'place_id' => 'getPlaceId',
        'address_line_1' => 'getAddressLine1',
        'address_line_2' => 'getAddressLine2',
        'city' => 'getCity',
        'state' => 'getState',
        'postal_code' => 'getPostalCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['full_address'] = $data['full_address'] ?? null;
        $this->container['formatted_address_1'] = $data['formatted_address_1'] ?? null;
        $this->container['formatted_address_2'] = $data['formatted_address_2'] ?? null;
        $this->container['latitude'] = $data['latitude'] ?? null;
        $this->container['longitude'] = $data['longitude'] ?? null;
        $this->container['place_id'] = $data['place_id'] ?? null;
        $this->container['address_line_1'] = $data['address_line_1'] ?? null;
        $this->container['address_line_2'] = $data['address_line_2'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['postal_code'] = $data['postal_code'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (!is_null($this->container['full_address']) && (mb_strlen($this->container['full_address']) > 255)) {
            $invalidProperties[] = "invalid value for 'full_address', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['full_address']) && (mb_strlen($this->container['full_address']) < 0)) {
            $invalidProperties[] = "invalid value for 'full_address', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['formatted_address_1'] === null) {
            $invalidProperties[] = "'formatted_address_1' can't be null";
        }
        if ((mb_strlen($this->container['formatted_address_1']) > 255)) {
            $invalidProperties[] = "invalid value for 'formatted_address_1', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['formatted_address_1']) < 0)) {
            $invalidProperties[] = "invalid value for 'formatted_address_1', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['formatted_address_2'] === null) {
            $invalidProperties[] = "'formatted_address_2' can't be null";
        }
        if ((mb_strlen($this->container['formatted_address_2']) > 255)) {
            $invalidProperties[] = "invalid value for 'formatted_address_2', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['formatted_address_2']) < 0)) {
            $invalidProperties[] = "invalid value for 'formatted_address_2', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['latitude'] === null) {
            $invalidProperties[] = "'latitude' can't be null";
        }
        if ($this->container['longitude'] === null) {
            $invalidProperties[] = "'longitude' can't be null";
        }
        if (!is_null($this->container['place_id']) && (mb_strlen($this->container['place_id']) > 255)) {
            $invalidProperties[] = "invalid value for 'place_id', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['place_id']) && (mb_strlen($this->container['place_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'place_id', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['address_line_1']) && (mb_strlen($this->container['address_line_1']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_line_1', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_line_1']) && (mb_strlen($this->container['address_line_1']) < 0)) {
            $invalidProperties[] = "invalid value for 'address_line_1', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['address_line_2']) && (mb_strlen($this->container['address_line_2']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_line_2', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_line_2']) && (mb_strlen($this->container['address_line_2']) < 0)) {
            $invalidProperties[] = "invalid value for 'address_line_2', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) > 255)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) < 0)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['state']) && (mb_strlen($this->container['state']) > 255)) {
            $invalidProperties[] = "invalid value for 'state', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['state']) && (mb_strlen($this->container['state']) < 0)) {
            $invalidProperties[] = "invalid value for 'state', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['postal_code']) && (mb_strlen($this->container['postal_code']) > 255)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['postal_code']) && (mb_strlen($this->container['postal_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id ID of address.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets full_address
     *
     * @return string|null
     */
    public function getFullAddress()
    {
        return $this->container['full_address'];
    }

    /**
     * Sets full_address
     *
     * @param string|null $full_address The full address string containing address_1 and address_2.
     *
     * @return self
     */
    public function setFullAddress($full_address)
    {
        if (!is_null($full_address) && (mb_strlen($full_address) > 255)) {
            throw new \InvalidArgumentException('invalid length for $full_address when calling PartialAddress., must be smaller than or equal to 255.');
        }
        if (!is_null($full_address) && (mb_strlen($full_address) < 0)) {
            throw new \InvalidArgumentException('invalid length for $full_address when calling PartialAddress., must be bigger than or equal to 0.');
        }

        $this->container['full_address'] = $full_address;

        return $this;
    }

    /**
     * Gets formatted_address_1
     *
     * @return string
     */
    public function getFormattedAddress1()
    {
        return $this->container['formatted_address_1'];
    }

    /**
     * Sets formatted_address_1
     *
     * @param string $formatted_address_1 A formatted address string containing the street.
     *
     * @return self
     */
    public function setFormattedAddress1($formatted_address_1)
    {
        if ((mb_strlen($formatted_address_1) > 255)) {
            throw new \InvalidArgumentException('invalid length for $formatted_address_1 when calling PartialAddress., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($formatted_address_1) < 0)) {
            throw new \InvalidArgumentException('invalid length for $formatted_address_1 when calling PartialAddress., must be bigger than or equal to 0.');
        }

        $this->container['formatted_address_1'] = $formatted_address_1;

        return $this;
    }

    /**
     * Gets formatted_address_2
     *
     * @return string
     */
    public function getFormattedAddress2()
    {
        return $this->container['formatted_address_2'];
    }

    /**
     * Sets formatted_address_2
     *
     * @param string $formatted_address_2 A formatted address string containing the city, state, and zipcode.
     *
     * @return self
     */
    public function setFormattedAddress2($formatted_address_2)
    {
        if ((mb_strlen($formatted_address_2) > 255)) {
            throw new \InvalidArgumentException('invalid length for $formatted_address_2 when calling PartialAddress., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($formatted_address_2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $formatted_address_2 when calling PartialAddress., must be bigger than or equal to 0.');
        }

        $this->container['formatted_address_2'] = $formatted_address_2;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return double
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param double $latitude Latitude of the address.
     *
     * @return self
     */
    public function setLatitude($latitude)
    {
        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return double
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param double $longitude Longitude of the address.
     *
     * @return self
     */
    public function setLongitude($longitude)
    {
        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets place_id
     *
     * @return string|null
     */
    public function getPlaceId()
    {
        return $this->container['place_id'];
    }

    /**
     * Sets place_id
     *
     * @param string|null $place_id ID of place.
     *
     * @return self
     */
    public function setPlaceId($place_id)
    {
        if (!is_null($place_id) && (mb_strlen($place_id) > 255)) {
            throw new \InvalidArgumentException('invalid length for $place_id when calling PartialAddress., must be smaller than or equal to 255.');
        }
        if (!is_null($place_id) && (mb_strlen($place_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $place_id when calling PartialAddress., must be bigger than or equal to 0.');
        }

        $this->container['place_id'] = $place_id;

        return $this;
    }

    /**
     * Gets address_line_1
     *
     * @return string|null
     */
    public function getAddressLine1()
    {
        return $this->container['address_line_1'];
    }

    /**
     * Sets address_line_1
     *
     * @param string|null $address_line_1 Address line 1
     *
     * @return self
     */
    public function setAddressLine1($address_line_1)
    {
        if (!is_null($address_line_1) && (mb_strlen($address_line_1) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_line_1 when calling PartialAddress., must be smaller than or equal to 255.');
        }
        if (!is_null($address_line_1) && (mb_strlen($address_line_1) < 0)) {
            throw new \InvalidArgumentException('invalid length for $address_line_1 when calling PartialAddress., must be bigger than or equal to 0.');
        }

        $this->container['address_line_1'] = $address_line_1;

        return $this;
    }

    /**
     * Gets address_line_2
     *
     * @return string|null
     */
    public function getAddressLine2()
    {
        return $this->container['address_line_2'];
    }

    /**
     * Sets address_line_2
     *
     * @param string|null $address_line_2 Address line 2
     *
     * @return self
     */
    public function setAddressLine2($address_line_2)
    {
        if (!is_null($address_line_2) && (mb_strlen($address_line_2) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_line_2 when calling PartialAddress., must be smaller than or equal to 255.');
        }
        if (!is_null($address_line_2) && (mb_strlen($address_line_2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $address_line_2 when calling PartialAddress., must be bigger than or equal to 0.');
        }

        $this->container['address_line_2'] = $address_line_2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city City
     *
     * @return self
     */
    public function setCity($city)
    {
        if (!is_null($city) && (mb_strlen($city) > 255)) {
            throw new \InvalidArgumentException('invalid length for $city when calling PartialAddress., must be smaller than or equal to 255.');
        }
        if (!is_null($city) && (mb_strlen($city) < 0)) {
            throw new \InvalidArgumentException('invalid length for $city when calling PartialAddress., must be bigger than or equal to 0.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state State
     *
     * @return self
     */
    public function setState($state)
    {
        if (!is_null($state) && (mb_strlen($state) > 255)) {
            throw new \InvalidArgumentException('invalid length for $state when calling PartialAddress., must be smaller than or equal to 255.');
        }
        if (!is_null($state) && (mb_strlen($state) < 0)) {
            throw new \InvalidArgumentException('invalid length for $state when calling PartialAddress., must be bigger than or equal to 0.');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code Postal Code
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        if (!is_null($postal_code) && (mb_strlen($postal_code) > 255)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling PartialAddress., must be smaller than or equal to 255.');
        }
        if (!is_null($postal_code) && (mb_strlen($postal_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling PartialAddress., must be bigger than or equal to 0.');
        }

        $this->container['postal_code'] = $postal_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


