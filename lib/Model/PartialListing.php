<?php
/**
 * PartialListing
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Aryeo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Aryeo
 *
 * # Introduction The Aryeo API gives access to the Aryeo platform. You can use your favorite HTTP/REST library for interfacing with the Aryeo API, or you can use one of our SDKs. Our SDKs are procedurally generated and a great starting point for experimental testing. If there is an additional language or framework that you want to see supported, then please reach and out and make a contribution!  <p align=\"center\"> <a href=\"https://github.com/AryeoHQ/aryeo-api-dart-sdk\"><img src=\"https://raw.githubusercontent.com/AryeoHQ/aryeo-api-docs/master/public/images/dart.svg\" alt=\"Dart\" width=\"44\" style=\"padding:10px;border: 1px solid #d3d3d3;border-radius: 5px;margin:4px;\"/></a> <a href=\"https://github.com/AryeoHQ/aryeo-api-go-sdk\"><img src=\"https://raw.githubusercontent.com/AryeoHQ/aryeo-api-docs/master/public/images/go.svg\" alt=\"Go\" width=\"44\" style=\"padding:10px;border: 1px solid #d3d3d3;border-radius: 5px;margin:4px;\"/></a> <a href=\"https://github.com/AryeoHQ/aryeo-api-js-sdk\"><img src=\"https://raw.githubusercontent.com/AryeoHQ/aryeo-api-docs/master/public/images/js.svg\" alt=\"Node JS\" width=\"44\" style=\"padding:10px;border: 1px solid #d3d3d3;border-radius: 5px;margin:4px;\"/></a> <a href=\"https://github.com/AryeoHQ/aryeo-api-php-sdk\"><img src=\"https://raw.githubusercontent.com/AryeoHQ/aryeo-api-docs/master/public/images/php.svg\" alt=\"PHP\" width=\"44\" style=\"padding:10px;border: 1px solid #d3d3d3;border-radius: 5px;margin:4px;\"/></a> <a href=\"https://github.com/AryeoHQ/aryeo-api-ruby-sdk\"><img src=\"https://raw.githubusercontent.com/AryeoHQ/aryeo-api-docs/master/public/images/ruby.svg\" alt=\"Ruby\" width=\"44\" style=\"padding:10px;border: 1px solid #d3d3d3;border-radius: 5px;margin:4px;\"/></a> <a href=\"https://github.com/AryeoHQ/aryeo-api-rust-sdk\"><img src=\"https://raw.githubusercontent.com/AryeoHQ/aryeo-api-docs/master/public/images/rust.svg\" alt=\"Rust\" width=\"44\" style=\"padding:10px;border: 1px solid #d3d3d3;border-radius: 5px;margin:4px;\"/></a> <a href=\"https://github.com/AryeoHQ/aryeo-api-swift-sdk\"><img src=\"https://raw.githubusercontent.com/AryeoHQ/aryeo-api-docs/master/public/images/swift.svg\" alt=\"Swift\" width=\"44\" style=\"padding:10px;border: 1px solid #d3d3d3;border-radius: 5px;margin:4px;\"/></a> </p>  **Note**: Some SDKs may require you to manually add the `Accept` header to all Aryeo API requests. If so, use the value `application/json`.  # Authentication To start using the Aryeo API, you will need to generate an API key from your group's developer settings. You can then authenticate to the Aryeo API by providing your key in the appropriate request header. Requests made without an API key will result in a `401 Unauthorized` error.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jarrod@aryeo.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aryeo\Model;

use \ArrayAccess;
use \Aryeo\ObjectSerializer;

/**
 * PartialListing Class Doc Comment
 *
 * @category Class
 * @description A real-estate property.
 * @package  Aryeo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PartialListing implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PartialListing';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'address' => '\Aryeo\Model\PartialAddress',
        'delivery_status' => 'string',
        'thumbnail_url' => 'string',
        'price' => 'int',
        'branded_url' => 'string',
        'square_feet' => 'float',
        'bedrooms' => 'int',
        'bathrooms' => 'float',
        'downloads_enabled' => 'bool',
        'status' => 'string',
        'property_details' => '\Aryeo\Model\PropertyDetails',
        'agent' => '\Aryeo\Model\PartialGroup',
        'co_agent' => '\Aryeo\Model\PartialGroup'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'address' => null,
        'delivery_status' => null,
        'thumbnail_url' => null,
        'price' => null,
        'branded_url' => 'uri',
        'square_feet' => null,
        'bedrooms' => null,
        'bathrooms' => null,
        'downloads_enabled' => null,
        'status' => null,
        'property_details' => null,
        'agent' => null,
        'co_agent' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'address' => 'address',
        'delivery_status' => 'delivery_status',
        'thumbnail_url' => 'thumbnail_url',
        'price' => 'price',
        'branded_url' => 'branded_url',
        'square_feet' => 'square_feet',
        'bedrooms' => 'bedrooms',
        'bathrooms' => 'bathrooms',
        'downloads_enabled' => 'downloads_enabled',
        'status' => 'status',
        'property_details' => 'property_details',
        'agent' => 'agent',
        'co_agent' => 'co_agent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'address' => 'setAddress',
        'delivery_status' => 'setDeliveryStatus',
        'thumbnail_url' => 'setThumbnailUrl',
        'price' => 'setPrice',
        'branded_url' => 'setBrandedUrl',
        'square_feet' => 'setSquareFeet',
        'bedrooms' => 'setBedrooms',
        'bathrooms' => 'setBathrooms',
        'downloads_enabled' => 'setDownloadsEnabled',
        'status' => 'setStatus',
        'property_details' => 'setPropertyDetails',
        'agent' => 'setAgent',
        'co_agent' => 'setCoAgent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'address' => 'getAddress',
        'delivery_status' => 'getDeliveryStatus',
        'thumbnail_url' => 'getThumbnailUrl',
        'price' => 'getPrice',
        'branded_url' => 'getBrandedUrl',
        'square_feet' => 'getSquareFeet',
        'bedrooms' => 'getBedrooms',
        'bathrooms' => 'getBathrooms',
        'downloads_enabled' => 'getDownloadsEnabled',
        'status' => 'getStatus',
        'property_details' => 'getPropertyDetails',
        'agent' => 'getAgent',
        'co_agent' => 'getCoAgent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const DELIVERY_STATUS_DELIVERED = 'delivered';
    const DELIVERY_STATUS_UNDELIVERED = 'undelivered';
    const STATUS_OFF_MARKET = 'Off Market';
    const STATUS_PENDING_LEASE = 'Pending Lease';
    const STATUS_VACATION_RENTAL = 'Vacation Rental';
    const STATUS_LEASED = 'Leased';
    const STATUS_FOR_SALE = 'For Sale';
    const STATUS_DRAFT = 'Draft';
    const STATUS_COMING_SOON = 'Coming Soon';
    const STATUS_SOLDM = 'Soldm';
    const STATUS_NULL = 'NULL';
    const STATUS_FOR_LEASE = 'For Lease';
    const STATUS_PENDING_SALE = 'Pending Sale';
    const STATUS_PRICE_REDUCTION = 'Price Reduction';
    const STATUS_SOLD = 'Sold';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeliveryStatusAllowableValues()
    {
        return [
            self::DELIVERY_STATUS_DELIVERED,
            self::DELIVERY_STATUS_UNDELIVERED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_OFF_MARKET,
            self::STATUS_PENDING_LEASE,
            self::STATUS_VACATION_RENTAL,
            self::STATUS_LEASED,
            self::STATUS_FOR_SALE,
            self::STATUS_DRAFT,
            self::STATUS_COMING_SOON,
            self::STATUS_SOLDM,
            self::STATUS_NULL,
            self::STATUS_FOR_LEASE,
            self::STATUS_PENDING_SALE,
            self::STATUS_PRICE_REDUCTION,
            self::STATUS_SOLD,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['address'] = $data['address'] ?? null;
        $this->container['delivery_status'] = $data['delivery_status'] ?? null;
        $this->container['thumbnail_url'] = $data['thumbnail_url'] ?? null;
        $this->container['price'] = $data['price'] ?? null;
        $this->container['branded_url'] = $data['branded_url'] ?? null;
        $this->container['square_feet'] = $data['square_feet'] ?? null;
        $this->container['bedrooms'] = $data['bedrooms'] ?? null;
        $this->container['bathrooms'] = $data['bathrooms'] ?? null;
        $this->container['downloads_enabled'] = $data['downloads_enabled'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['property_details'] = $data['property_details'] ?? null;
        $this->container['agent'] = $data['agent'] ?? null;
        $this->container['co_agent'] = $data['co_agent'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ((mb_strlen($this->container['id']) > 255)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['id']) < 0)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if ($this->container['delivery_status'] === null) {
            $invalidProperties[] = "'delivery_status' can't be null";
        }
        $allowedValues = $this->getDeliveryStatusAllowableValues();
        if (!is_null($this->container['delivery_status']) && !in_array($this->container['delivery_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'delivery_status', must be one of '%s'",
                $this->container['delivery_status'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['delivery_status']) > 255)) {
            $invalidProperties[] = "invalid value for 'delivery_status', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['delivery_status']) < 0)) {
            $invalidProperties[] = "invalid value for 'delivery_status', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['thumbnail_url']) && (mb_strlen($this->container['thumbnail_url']) > 1000)) {
            $invalidProperties[] = "invalid value for 'thumbnail_url', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['thumbnail_url']) && (mb_strlen($this->container['thumbnail_url']) < 0)) {
            $invalidProperties[] = "invalid value for 'thumbnail_url', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['branded_url']) && (mb_strlen($this->container['branded_url']) > 65535)) {
            $invalidProperties[] = "invalid value for 'branded_url', the character length must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['branded_url']) && (mb_strlen($this->container['branded_url']) < 1)) {
            $invalidProperties[] = "invalid value for 'branded_url', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['downloads_enabled'] === null) {
            $invalidProperties[] = "'downloads_enabled' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['status']) && (mb_strlen($this->container['status']) > 100)) {
            $invalidProperties[] = "invalid value for 'status', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['status']) && (mb_strlen($this->container['status']) < 1)) {
            $invalidProperties[] = "invalid value for 'status', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id ID of the listing.
     *
     * @return self
     */
    public function setId($id)
    {
        if ((mb_strlen($id) > 255)) {
            throw new \InvalidArgumentException('invalid length for $id when calling PartialListing., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $id when calling PartialListing., must be bigger than or equal to 0.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Aryeo\Model\PartialAddress
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Aryeo\Model\PartialAddress $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets delivery_status
     *
     * @return string
     */
    public function getDeliveryStatus()
    {
        return $this->container['delivery_status'];
    }

    /**
     * Sets delivery_status
     *
     * @param string $delivery_status Has the listing been delivered?
     *
     * @return self
     */
    public function setDeliveryStatus($delivery_status)
    {
        $allowedValues = $this->getDeliveryStatusAllowableValues();
        if (!in_array($delivery_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'delivery_status', must be one of '%s'",
                    $delivery_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($delivery_status) > 255)) {
            throw new \InvalidArgumentException('invalid length for $delivery_status when calling PartialListing., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($delivery_status) < 0)) {
            throw new \InvalidArgumentException('invalid length for $delivery_status when calling PartialListing., must be bigger than or equal to 0.');
        }

        $this->container['delivery_status'] = $delivery_status;

        return $this;
    }

    /**
     * Gets thumbnail_url
     *
     * @return string|null
     */
    public function getThumbnailUrl()
    {
        return $this->container['thumbnail_url'];
    }

    /**
     * Sets thumbnail_url
     *
     * @param string|null $thumbnail_url Thumbnail URL for the listing.
     *
     * @return self
     */
    public function setThumbnailUrl($thumbnail_url)
    {
        if (!is_null($thumbnail_url) && (mb_strlen($thumbnail_url) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $thumbnail_url when calling PartialListing., must be smaller than or equal to 1000.');
        }
        if (!is_null($thumbnail_url) && (mb_strlen($thumbnail_url) < 0)) {
            throw new \InvalidArgumentException('invalid length for $thumbnail_url when calling PartialListing., must be bigger than or equal to 0.');
        }

        $this->container['thumbnail_url'] = $thumbnail_url;

        return $this;
    }

    /**
     * Gets price
     *
     * @return int|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param int|null $price The price of the property in dollars.
     *
     * @return self
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets branded_url
     *
     * @return string|null
     */
    public function getBrandedUrl()
    {
        return $this->container['branded_url'];
    }

    /**
     * Sets branded_url
     *
     * @param string|null $branded_url URL for branded property website.
     *
     * @return self
     */
    public function setBrandedUrl($branded_url)
    {
        if (!is_null($branded_url) && (mb_strlen($branded_url) > 65535)) {
            throw new \InvalidArgumentException('invalid length for $branded_url when calling PartialListing., must be smaller than or equal to 65535.');
        }
        if (!is_null($branded_url) && (mb_strlen($branded_url) < 1)) {
            throw new \InvalidArgumentException('invalid length for $branded_url when calling PartialListing., must be bigger than or equal to 1.');
        }

        $this->container['branded_url'] = $branded_url;

        return $this;
    }

    /**
     * Gets square_feet
     *
     * @return float|null
     */
    public function getSquareFeet()
    {
        return $this->container['square_feet'];
    }

    /**
     * Sets square_feet
     *
     * @param float|null $square_feet Total number of square feet.
     *
     * @return self
     */
    public function setSquareFeet($square_feet)
    {
        $this->container['square_feet'] = $square_feet;

        return $this;
    }

    /**
     * Gets bedrooms
     *
     * @return int|null
     */
    public function getBedrooms()
    {
        return $this->container['bedrooms'];
    }

    /**
     * Sets bedrooms
     *
     * @param int|null $bedrooms Number of bedrooms.
     *
     * @return self
     */
    public function setBedrooms($bedrooms)
    {
        $this->container['bedrooms'] = $bedrooms;

        return $this;
    }

    /**
     * Gets bathrooms
     *
     * @return float|null
     */
    public function getBathrooms()
    {
        return $this->container['bathrooms'];
    }

    /**
     * Sets bathrooms
     *
     * @param float|null $bathrooms Number of bathrooms.
     *
     * @return self
     */
    public function setBathrooms($bathrooms)
    {
        $this->container['bathrooms'] = $bathrooms;

        return $this;
    }

    /**
     * Gets downloads_enabled
     *
     * @return bool
     */
    public function getDownloadsEnabled()
    {
        return $this->container['downloads_enabled'];
    }

    /**
     * Sets downloads_enabled
     *
     * @param bool $downloads_enabled Are downloads enabled for this listing?
     *
     * @return self
     */
    public function setDownloadsEnabled($downloads_enabled)
    {
        $this->container['downloads_enabled'] = $downloads_enabled;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Sales status for the listing.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        if (!is_null($status) && (mb_strlen($status) > 100)) {
            throw new \InvalidArgumentException('invalid length for $status when calling PartialListing., must be smaller than or equal to 100.');
        }
        if (!is_null($status) && (mb_strlen($status) < 1)) {
            throw new \InvalidArgumentException('invalid length for $status when calling PartialListing., must be bigger than or equal to 1.');
        }

        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets property_details
     *
     * @return \Aryeo\Model\PropertyDetails|null
     */
    public function getPropertyDetails()
    {
        return $this->container['property_details'];
    }

    /**
     * Sets property_details
     *
     * @param \Aryeo\Model\PropertyDetails|null $property_details property_details
     *
     * @return self
     */
    public function setPropertyDetails($property_details)
    {
        $this->container['property_details'] = $property_details;

        return $this;
    }

    /**
     * Gets agent
     *
     * @return \Aryeo\Model\PartialGroup|null
     */
    public function getAgent()
    {
        return $this->container['agent'];
    }

    /**
     * Sets agent
     *
     * @param \Aryeo\Model\PartialGroup|null $agent agent
     *
     * @return self
     */
    public function setAgent($agent)
    {
        $this->container['agent'] = $agent;

        return $this;
    }

    /**
     * Gets co_agent
     *
     * @return \Aryeo\Model\PartialGroup|null
     */
    public function getCoAgent()
    {
        return $this->container['co_agent'];
    }

    /**
     * Sets co_agent
     *
     * @param \Aryeo\Model\PartialGroup|null $co_agent co_agent
     *
     * @return self
     */
    public function setCoAgent($co_agent)
    {
        $this->container['co_agent'] = $co_agent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


