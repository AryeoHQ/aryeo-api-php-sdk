<?php
/**
 * Listing
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Aryeo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Aryeo
 *
 * Contact: jarrod@aryeo.com
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aryeo\Model;

use \ArrayAccess;
use \Aryeo\ObjectSerializer;

/**
 * Listing Class Doc Comment
 *
 * @category Class
 * @description A real-estate property.
 * @package  Aryeo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Listing implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Listing';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'address' => '\Aryeo\Model\PartialAddress',
        'delivery_status' => 'string',
        'thumbnail_url' => 'string',
        'agent' => '\Aryeo\Model\Group',
        'co_agent' => '\Aryeo\Model\Group',
        'images' => '\Aryeo\Model\Image[]',
        'videos' => '\Aryeo\Model\Video[]',
        'floor_plans' => '\Aryeo\Model\FloorPlan[]',
        'property_websites' => '\Aryeo\Model\PropertyWebsites',
        'interactive_content' => '\Aryeo\Model\InteractiveContent[]',
        'property_details' => '\Aryeo\Model\PropertyDetails',
        'downloads_enabled' => 'bool',
        'orders' => '\Aryeo\Model\Order[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'address' => null,
        'delivery_status' => null,
        'thumbnail_url' => 'uri',
        'agent' => null,
        'co_agent' => null,
        'images' => null,
        'videos' => null,
        'floor_plans' => null,
        'property_websites' => null,
        'interactive_content' => null,
        'property_details' => null,
        'downloads_enabled' => null,
        'orders' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'address' => 'address',
        'delivery_status' => 'delivery_status',
        'thumbnail_url' => 'thumbnail_url',
        'agent' => 'agent',
        'co_agent' => 'co_agent',
        'images' => 'images',
        'videos' => 'videos',
        'floor_plans' => 'floor_plans',
        'property_websites' => 'property_websites',
        'interactive_content' => 'interactive_content',
        'property_details' => 'property_details',
        'downloads_enabled' => 'downloads_enabled',
        'orders' => 'orders'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'address' => 'setAddress',
        'delivery_status' => 'setDeliveryStatus',
        'thumbnail_url' => 'setThumbnailUrl',
        'agent' => 'setAgent',
        'co_agent' => 'setCoAgent',
        'images' => 'setImages',
        'videos' => 'setVideos',
        'floor_plans' => 'setFloorPlans',
        'property_websites' => 'setPropertyWebsites',
        'interactive_content' => 'setInteractiveContent',
        'property_details' => 'setPropertyDetails',
        'downloads_enabled' => 'setDownloadsEnabled',
        'orders' => 'setOrders'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'address' => 'getAddress',
        'delivery_status' => 'getDeliveryStatus',
        'thumbnail_url' => 'getThumbnailUrl',
        'agent' => 'getAgent',
        'co_agent' => 'getCoAgent',
        'images' => 'getImages',
        'videos' => 'getVideos',
        'floor_plans' => 'getFloorPlans',
        'property_websites' => 'getPropertyWebsites',
        'interactive_content' => 'getInteractiveContent',
        'property_details' => 'getPropertyDetails',
        'downloads_enabled' => 'getDownloadsEnabled',
        'orders' => 'getOrders'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const DELIVERY_STATUS_DELIVERED = 'delivered';
    const DELIVERY_STATUS_UNDELIVERED = 'undelivered';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeliveryStatusAllowableValues()
    {
        return [
            self::DELIVERY_STATUS_DELIVERED,
            self::DELIVERY_STATUS_UNDELIVERED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['address'] = $data['address'] ?? null;
        $this->container['delivery_status'] = $data['delivery_status'] ?? null;
        $this->container['thumbnail_url'] = $data['thumbnail_url'] ?? null;
        $this->container['agent'] = $data['agent'] ?? null;
        $this->container['co_agent'] = $data['co_agent'] ?? null;
        $this->container['images'] = $data['images'] ?? null;
        $this->container['videos'] = $data['videos'] ?? null;
        $this->container['floor_plans'] = $data['floor_plans'] ?? null;
        $this->container['property_websites'] = $data['property_websites'] ?? null;
        $this->container['interactive_content'] = $data['interactive_content'] ?? null;
        $this->container['property_details'] = $data['property_details'] ?? null;
        $this->container['downloads_enabled'] = $data['downloads_enabled'] ?? null;
        $this->container['orders'] = $data['orders'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ((mb_strlen($this->container['id']) > 255)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['id']) < 0)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if ($this->container['delivery_status'] === null) {
            $invalidProperties[] = "'delivery_status' can't be null";
        }
        $allowedValues = $this->getDeliveryStatusAllowableValues();
        if (!is_null($this->container['delivery_status']) && !in_array($this->container['delivery_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'delivery_status', must be one of '%s'",
                $this->container['delivery_status'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['delivery_status']) > 255)) {
            $invalidProperties[] = "invalid value for 'delivery_status', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['delivery_status']) < 0)) {
            $invalidProperties[] = "invalid value for 'delivery_status', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['thumbnail_url']) && (mb_strlen($this->container['thumbnail_url']) > 65535)) {
            $invalidProperties[] = "invalid value for 'thumbnail_url', the character length must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['thumbnail_url']) && (mb_strlen($this->container['thumbnail_url']) < 0)) {
            $invalidProperties[] = "invalid value for 'thumbnail_url', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['downloads_enabled'] === null) {
            $invalidProperties[] = "'downloads_enabled' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id ID of the listing.
     *
     * @return self
     */
    public function setId($id)
    {
        if ((mb_strlen($id) > 255)) {
            throw new \InvalidArgumentException('invalid length for $id when calling Listing., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $id when calling Listing., must be bigger than or equal to 0.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Aryeo\Model\PartialAddress
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Aryeo\Model\PartialAddress $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets delivery_status
     *
     * @return string
     */
    public function getDeliveryStatus()
    {
        return $this->container['delivery_status'];
    }

    /**
     * Sets delivery_status
     *
     * @param string $delivery_status Has this listing been delivered?
     *
     * @return self
     */
    public function setDeliveryStatus($delivery_status)
    {
        $allowedValues = $this->getDeliveryStatusAllowableValues();
        if (!in_array($delivery_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'delivery_status', must be one of '%s'",
                    $delivery_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($delivery_status) > 255)) {
            throw new \InvalidArgumentException('invalid length for $delivery_status when calling Listing., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($delivery_status) < 0)) {
            throw new \InvalidArgumentException('invalid length for $delivery_status when calling Listing., must be bigger than or equal to 0.');
        }

        $this->container['delivery_status'] = $delivery_status;

        return $this;
    }

    /**
     * Gets thumbnail_url
     *
     * @return string|null
     */
    public function getThumbnailUrl()
    {
        return $this->container['thumbnail_url'];
    }

    /**
     * Sets thumbnail_url
     *
     * @param string|null $thumbnail_url Thumbnail URL for the listing.
     *
     * @return self
     */
    public function setThumbnailUrl($thumbnail_url)
    {
        if (!is_null($thumbnail_url) && (mb_strlen($thumbnail_url) > 65535)) {
            throw new \InvalidArgumentException('invalid length for $thumbnail_url when calling Listing., must be smaller than or equal to 65535.');
        }
        if (!is_null($thumbnail_url) && (mb_strlen($thumbnail_url) < 0)) {
            throw new \InvalidArgumentException('invalid length for $thumbnail_url when calling Listing., must be bigger than or equal to 0.');
        }

        $this->container['thumbnail_url'] = $thumbnail_url;

        return $this;
    }

    /**
     * Gets agent
     *
     * @return \Aryeo\Model\Group|null
     */
    public function getAgent()
    {
        return $this->container['agent'];
    }

    /**
     * Sets agent
     *
     * @param \Aryeo\Model\Group|null $agent agent
     *
     * @return self
     */
    public function setAgent($agent)
    {
        $this->container['agent'] = $agent;

        return $this;
    }

    /**
     * Gets co_agent
     *
     * @return \Aryeo\Model\Group|null
     */
    public function getCoAgent()
    {
        return $this->container['co_agent'];
    }

    /**
     * Sets co_agent
     *
     * @param \Aryeo\Model\Group|null $co_agent co_agent
     *
     * @return self
     */
    public function setCoAgent($co_agent)
    {
        $this->container['co_agent'] = $co_agent;

        return $this;
    }

    /**
     * Gets images
     *
     * @return \Aryeo\Model\Image[]|null
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param \Aryeo\Model\Image[]|null $images images
     *
     * @return self
     */
    public function setImages($images)
    {
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets videos
     *
     * @return \Aryeo\Model\Video[]|null
     */
    public function getVideos()
    {
        return $this->container['videos'];
    }

    /**
     * Sets videos
     *
     * @param \Aryeo\Model\Video[]|null $videos videos
     *
     * @return self
     */
    public function setVideos($videos)
    {
        $this->container['videos'] = $videos;

        return $this;
    }

    /**
     * Gets floor_plans
     *
     * @return \Aryeo\Model\FloorPlan[]|null
     */
    public function getFloorPlans()
    {
        return $this->container['floor_plans'];
    }

    /**
     * Sets floor_plans
     *
     * @param \Aryeo\Model\FloorPlan[]|null $floor_plans floor_plans
     *
     * @return self
     */
    public function setFloorPlans($floor_plans)
    {
        $this->container['floor_plans'] = $floor_plans;

        return $this;
    }

    /**
     * Gets property_websites
     *
     * @return \Aryeo\Model\PropertyWebsites|null
     */
    public function getPropertyWebsites()
    {
        return $this->container['property_websites'];
    }

    /**
     * Sets property_websites
     *
     * @param \Aryeo\Model\PropertyWebsites|null $property_websites property_websites
     *
     * @return self
     */
    public function setPropertyWebsites($property_websites)
    {
        $this->container['property_websites'] = $property_websites;

        return $this;
    }

    /**
     * Gets interactive_content
     *
     * @return \Aryeo\Model\InteractiveContent[]|null
     */
    public function getInteractiveContent()
    {
        return $this->container['interactive_content'];
    }

    /**
     * Sets interactive_content
     *
     * @param \Aryeo\Model\InteractiveContent[]|null $interactive_content interactive_content
     *
     * @return self
     */
    public function setInteractiveContent($interactive_content)
    {
        $this->container['interactive_content'] = $interactive_content;

        return $this;
    }

    /**
     * Gets property_details
     *
     * @return \Aryeo\Model\PropertyDetails|null
     */
    public function getPropertyDetails()
    {
        return $this->container['property_details'];
    }

    /**
     * Sets property_details
     *
     * @param \Aryeo\Model\PropertyDetails|null $property_details property_details
     *
     * @return self
     */
    public function setPropertyDetails($property_details)
    {
        $this->container['property_details'] = $property_details;

        return $this;
    }

    /**
     * Gets downloads_enabled
     *
     * @return bool
     */
    public function getDownloadsEnabled()
    {
        return $this->container['downloads_enabled'];
    }

    /**
     * Sets downloads_enabled
     *
     * @param bool $downloads_enabled Are downloads enabled for this listing?
     *
     * @return self
     */
    public function setDownloadsEnabled($downloads_enabled)
    {
        $this->container['downloads_enabled'] = $downloads_enabled;

        return $this;
    }

    /**
     * Gets orders
     *
     * @return \Aryeo\Model\Order[]|null
     */
    public function getOrders()
    {
        return $this->container['orders'];
    }

    /**
     * Sets orders
     *
     * @param \Aryeo\Model\Order[]|null $orders orders
     *
     * @return self
     */
    public function setOrders($orders)
    {
        $this->container['orders'] = $orders;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


