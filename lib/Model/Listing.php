<?php
/**
 * Listing
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Aryeo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Aryeo
 *
 * Contact: jarrod@aryeo.com
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aryeo\Model;

use \ArrayAccess;
use \Aryeo\ObjectSerializer;

/**
 * Listing Class Doc Comment
 *
 * @category Class
 * @description A real estate listing.
 * @package  Aryeo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Listing implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Listing';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'object' => 'string',
        'id' => 'string',
        'address' => '\Aryeo\Model\Address',
        'mls_number' => 'string',
        'type' => 'string',
        'sub_type' => 'string',
        'status' => 'string',
        'standard_status' => 'string',
        'description' => 'string',
        'lot' => '\Aryeo\Model\ListingLot',
        'building' => '\Aryeo\Model\ListingBuilding',
        'price' => '\Aryeo\Model\ListingPrice',
        'list_agent' => '\Aryeo\Model\Group',
        'co_list_agent' => '\Aryeo\Model\Group',
        'images' => '\Aryeo\Model\Image[]',
        'videos' => '\Aryeo\Model\Video[]',
        'floor_plans' => '\Aryeo\Model\FloorPlan[]',
        'interactive_content' => '\Aryeo\Model\InteractiveContent[]',
        'property_website' => '\Aryeo\Model\PropertyWebsite',
        'orders' => '\Aryeo\Model\Order[]',
        'downloads_enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'object' => null,
        'id' => 'uuid',
        'address' => null,
        'mls_number' => null,
        'type' => null,
        'sub_type' => null,
        'status' => null,
        'standard_status' => null,
        'description' => null,
        'lot' => null,
        'building' => null,
        'price' => null,
        'list_agent' => null,
        'co_list_agent' => null,
        'images' => null,
        'videos' => null,
        'floor_plans' => null,
        'interactive_content' => null,
        'property_website' => null,
        'orders' => null,
        'downloads_enabled' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'object' => 'object',
        'id' => 'id',
        'address' => 'address',
        'mls_number' => 'mls_number',
        'type' => 'type',
        'sub_type' => 'sub_type',
        'status' => 'status',
        'standard_status' => 'standard_status',
        'description' => 'description',
        'lot' => 'lot',
        'building' => 'building',
        'price' => 'price',
        'list_agent' => 'list_agent',
        'co_list_agent' => 'co_list_agent',
        'images' => 'images',
        'videos' => 'videos',
        'floor_plans' => 'floor_plans',
        'interactive_content' => 'interactive_content',
        'property_website' => 'property_website',
        'orders' => 'orders',
        'downloads_enabled' => 'downloads_enabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'object' => 'setObject',
        'id' => 'setId',
        'address' => 'setAddress',
        'mls_number' => 'setMlsNumber',
        'type' => 'setType',
        'sub_type' => 'setSubType',
        'status' => 'setStatus',
        'standard_status' => 'setStandardStatus',
        'description' => 'setDescription',
        'lot' => 'setLot',
        'building' => 'setBuilding',
        'price' => 'setPrice',
        'list_agent' => 'setListAgent',
        'co_list_agent' => 'setCoListAgent',
        'images' => 'setImages',
        'videos' => 'setVideos',
        'floor_plans' => 'setFloorPlans',
        'interactive_content' => 'setInteractiveContent',
        'property_website' => 'setPropertyWebsite',
        'orders' => 'setOrders',
        'downloads_enabled' => 'setDownloadsEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'object' => 'getObject',
        'id' => 'getId',
        'address' => 'getAddress',
        'mls_number' => 'getMlsNumber',
        'type' => 'getType',
        'sub_type' => 'getSubType',
        'status' => 'getStatus',
        'standard_status' => 'getStandardStatus',
        'description' => 'getDescription',
        'lot' => 'getLot',
        'building' => 'getBuilding',
        'price' => 'getPrice',
        'list_agent' => 'getListAgent',
        'co_list_agent' => 'getCoListAgent',
        'images' => 'getImages',
        'videos' => 'getVideos',
        'floor_plans' => 'getFloorPlans',
        'interactive_content' => 'getInteractiveContent',
        'property_website' => 'getPropertyWebsite',
        'orders' => 'getOrders',
        'downloads_enabled' => 'getDownloadsEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_BUSINESS_OPPORTUNITY = 'BUSINESS_OPPORTUNITY';
    const TYPE_COMMERCIAL_LEASE = 'COMMERCIAL_LEASE';
    const TYPE_COMMERCIAL_SALE = 'COMMERCIAL_SALE';
    const TYPE_FARM = 'FARM';
    const TYPE_LAND = 'LAND';
    const TYPE_MANUFACTURED_IN_PARK = 'MANUFACTURED_IN_PARK';
    const TYPE_RESIDENTIAL = 'RESIDENTIAL';
    const TYPE_RESIDENTIAL_INCOME = 'RESIDENTIAL_INCOME';
    const TYPE_RESIDENTIAL_LEASE = 'RESIDENTIAL_LEASE';
    const SUB_TYPE_APARTMENT = 'APARTMENT';
    const SUB_TYPE_CONDOMINIUM = 'CONDOMINIUM';
    const SUB_TYPE_DUPLEX = 'DUPLEX';
    const SUB_TYPE_FARM = 'FARM';
    const SUB_TYPE_SINGLE_FAMILY_RESIDENCE = 'SINGLE_FAMILY_RESIDENCE';
    const SUB_TYPE_TIMESHARE = 'TIMESHARE';
    const SUB_TYPE_TOWNHOUSE = 'TOWNHOUSE';
    const SUB_TYPE_OFFICE = 'OFFICE';
    const STATUS_DRAFT = 'DRAFT';
    const STATUS_COMING_SOON = 'COMING_SOON';
    const STATUS_FOR_SALE = 'FOR_SALE';
    const STATUS_FOR_LEASE = 'FOR_LEASE';
    const STATUS_PENDING_SALE = 'PENDING_SALE';
    const STATUS_PENDING_LEASE = 'PENDING_LEASE';
    const STATUS_SOLD = 'SOLD';
    const STATUS_LEASED = 'LEASED';
    const STATUS_OFF_MARKET = 'OFF_MARKET';
    const STANDARD_STATUS_ACTIVE = 'ACTIVE';
    const STANDARD_STATUS_ACTIVE_UNDER_CONTRACT = 'ACTIVE_UNDER_CONTRACT';
    const STANDARD_STATUS_CANCELED = 'CANCELED';
    const STANDARD_STATUS_CLOSED = 'CLOSED';
    const STANDARD_STATUS_COMING_SOON = 'COMING_SOON';
    const STANDARD_STATUS_DELETE = 'DELETE';
    const STANDARD_STATUS_EXPIRED = 'EXPIRED';
    const STANDARD_STATUS_HOLD = 'HOLD';
    const STANDARD_STATUS_INCOMPLETE = 'INCOMPLETE';
    const STANDARD_STATUS_PENDING = 'PENDING';
    const STANDARD_STATUS_WITHDRAWN = 'WITHDRAWN';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_BUSINESS_OPPORTUNITY,
            self::TYPE_COMMERCIAL_LEASE,
            self::TYPE_COMMERCIAL_SALE,
            self::TYPE_FARM,
            self::TYPE_LAND,
            self::TYPE_MANUFACTURED_IN_PARK,
            self::TYPE_RESIDENTIAL,
            self::TYPE_RESIDENTIAL_INCOME,
            self::TYPE_RESIDENTIAL_LEASE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSubTypeAllowableValues()
    {
        return [
            self::SUB_TYPE_APARTMENT,
            self::SUB_TYPE_CONDOMINIUM,
            self::SUB_TYPE_DUPLEX,
            self::SUB_TYPE_FARM,
            self::SUB_TYPE_SINGLE_FAMILY_RESIDENCE,
            self::SUB_TYPE_TIMESHARE,
            self::SUB_TYPE_TOWNHOUSE,
            self::SUB_TYPE_OFFICE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_DRAFT,
            self::STATUS_COMING_SOON,
            self::STATUS_FOR_SALE,
            self::STATUS_FOR_LEASE,
            self::STATUS_PENDING_SALE,
            self::STATUS_PENDING_LEASE,
            self::STATUS_SOLD,
            self::STATUS_LEASED,
            self::STATUS_OFF_MARKET,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStandardStatusAllowableValues()
    {
        return [
            self::STANDARD_STATUS_ACTIVE,
            self::STANDARD_STATUS_ACTIVE_UNDER_CONTRACT,
            self::STANDARD_STATUS_CANCELED,
            self::STANDARD_STATUS_CLOSED,
            self::STANDARD_STATUS_COMING_SOON,
            self::STANDARD_STATUS_DELETE,
            self::STANDARD_STATUS_EXPIRED,
            self::STANDARD_STATUS_HOLD,
            self::STANDARD_STATUS_INCOMPLETE,
            self::STANDARD_STATUS_PENDING,
            self::STANDARD_STATUS_WITHDRAWN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['object'] = $data['object'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['address'] = $data['address'] ?? null;
        $this->container['mls_number'] = $data['mls_number'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['sub_type'] = $data['sub_type'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['standard_status'] = $data['standard_status'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['lot'] = $data['lot'] ?? null;
        $this->container['building'] = $data['building'] ?? null;
        $this->container['price'] = $data['price'] ?? null;
        $this->container['list_agent'] = $data['list_agent'] ?? null;
        $this->container['co_list_agent'] = $data['co_list_agent'] ?? null;
        $this->container['images'] = $data['images'] ?? null;
        $this->container['videos'] = $data['videos'] ?? null;
        $this->container['floor_plans'] = $data['floor_plans'] ?? null;
        $this->container['interactive_content'] = $data['interactive_content'] ?? null;
        $this->container['property_website'] = $data['property_website'] ?? null;
        $this->container['orders'] = $data['orders'] ?? null;
        $this->container['downloads_enabled'] = $data['downloads_enabled'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['object'] === null) {
            $invalidProperties[] = "'object' can't be null";
        }
        if ((mb_strlen($this->container['object']) > 100)) {
            $invalidProperties[] = "invalid value for 'object', the character length must be smaller than or equal to 100.";
        }

        if ((mb_strlen($this->container['object']) < 1)) {
            $invalidProperties[] = "invalid value for 'object', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ((mb_strlen($this->container['id']) > 36)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be smaller than or equal to 36.";
        }

        if ((mb_strlen($this->container['id']) < 36)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be bigger than or equal to 36.";
        }

        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if (!is_null($this->container['mls_number']) && (mb_strlen($this->container['mls_number']) > 100)) {
            $invalidProperties[] = "invalid value for 'mls_number', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['mls_number']) && (mb_strlen($this->container['mls_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'mls_number', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['type']) && (mb_strlen($this->container['type']) > 100)) {
            $invalidProperties[] = "invalid value for 'type', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['type']) && (mb_strlen($this->container['type']) < 1)) {
            $invalidProperties[] = "invalid value for 'type', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getSubTypeAllowableValues();
        if (!is_null($this->container['sub_type']) && !in_array($this->container['sub_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sub_type', must be one of '%s'",
                $this->container['sub_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['sub_type']) && (mb_strlen($this->container['sub_type']) > 100)) {
            $invalidProperties[] = "invalid value for 'sub_type', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['sub_type']) && (mb_strlen($this->container['sub_type']) < 1)) {
            $invalidProperties[] = "invalid value for 'sub_type', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['status']) && (mb_strlen($this->container['status']) > 100)) {
            $invalidProperties[] = "invalid value for 'status', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['status']) && (mb_strlen($this->container['status']) < 1)) {
            $invalidProperties[] = "invalid value for 'status', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getStandardStatusAllowableValues();
        if (!is_null($this->container['standard_status']) && !in_array($this->container['standard_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'standard_status', must be one of '%s'",
                $this->container['standard_status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['standard_status']) && (mb_strlen($this->container['standard_status']) > 100)) {
            $invalidProperties[] = "invalid value for 'standard_status', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['standard_status']) && (mb_strlen($this->container['standard_status']) < 1)) {
            $invalidProperties[] = "invalid value for 'standard_status', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 65535)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) < 1)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['downloads_enabled'] === null) {
            $invalidProperties[] = "'downloads_enabled' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets object
     *
     * @return string
     */
    public function getObject()
    {
        return $this->container['object'];
    }

    /**
     * Sets object
     *
     * @param string $object String representing the object’s type. Objects of the same type share the same schema.
     *
     * @return self
     */
    public function setObject($object)
    {
        if ((mb_strlen($object) > 100)) {
            throw new \InvalidArgumentException('invalid length for $object when calling Listing., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($object) < 1)) {
            throw new \InvalidArgumentException('invalid length for $object when calling Listing., must be bigger than or equal to 1.');
        }

        $this->container['object'] = $object;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id ID of the listing. UUID Version 4.
     *
     * @return self
     */
    public function setId($id)
    {
        if ((mb_strlen($id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $id when calling Listing., must be smaller than or equal to 36.');
        }
        if ((mb_strlen($id) < 36)) {
            throw new \InvalidArgumentException('invalid length for $id when calling Listing., must be bigger than or equal to 36.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Aryeo\Model\Address
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Aryeo\Model\Address $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets mls_number
     *
     * @return string|null
     */
    public function getMlsNumber()
    {
        return $this->container['mls_number'];
    }

    /**
     * Sets mls_number
     *
     * @param string|null $mls_number The identifier for a listing on its local MLS.
     *
     * @return self
     */
    public function setMlsNumber($mls_number)
    {
        if (!is_null($mls_number) && (mb_strlen($mls_number) > 100)) {
            throw new \InvalidArgumentException('invalid length for $mls_number when calling Listing., must be smaller than or equal to 100.');
        }
        if (!is_null($mls_number) && (mb_strlen($mls_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $mls_number when calling Listing., must be bigger than or equal to 1.');
        }

        $this->container['mls_number'] = $mls_number;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type General type of the listing, primarily categorizing its use case. Examples include residential and commercial.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        if (!is_null($type) && (mb_strlen($type) > 100)) {
            throw new \InvalidArgumentException('invalid length for $type when calling Listing., must be smaller than or equal to 100.');
        }
        if (!is_null($type) && (mb_strlen($type) < 1)) {
            throw new \InvalidArgumentException('invalid length for $type when calling Listing., must be bigger than or equal to 1.');
        }

        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets sub_type
     *
     * @return string|null
     */
    public function getSubType()
    {
        return $this->container['sub_type'];
    }

    /**
     * Sets sub_type
     *
     * @param string|null $sub_type Further specifies the listing type. Examples include family residence and condominium.
     *
     * @return self
     */
    public function setSubType($sub_type)
    {
        $allowedValues = $this->getSubTypeAllowableValues();
        if (!is_null($sub_type) && !in_array($sub_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sub_type', must be one of '%s'",
                    $sub_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        if (!is_null($sub_type) && (mb_strlen($sub_type) > 100)) {
            throw new \InvalidArgumentException('invalid length for $sub_type when calling Listing., must be smaller than or equal to 100.');
        }
        if (!is_null($sub_type) && (mb_strlen($sub_type) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sub_type when calling Listing., must be bigger than or equal to 1.');
        }

        $this->container['sub_type'] = $sub_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Local, regional, or otherwise custom status for the listing used by the parties involved in the listing transaction. While variable, these statuses are typically mapped to the listing's standard status.
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        if (!is_null($status) && (mb_strlen($status) > 100)) {
            throw new \InvalidArgumentException('invalid length for $status when calling Listing., must be smaller than or equal to 100.');
        }
        if (!is_null($status) && (mb_strlen($status) < 1)) {
            throw new \InvalidArgumentException('invalid length for $status when calling Listing., must be bigger than or equal to 1.');
        }

        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets standard_status
     *
     * @return string|null
     */
    public function getStandardStatus()
    {
        return $this->container['standard_status'];
    }

    /**
     * Sets standard_status
     *
     * @param string|null $standard_status The status of the listing as it reflects the state of the contract between the listing agent and seller or an agreement with a buyer, including Active, Active Under Contract, Canceled, Closed, Expired, Pending, and Withdrawn.
     *
     * @return self
     */
    public function setStandardStatus($standard_status)
    {
        $allowedValues = $this->getStandardStatusAllowableValues();
        if (!is_null($standard_status) && !in_array($standard_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'standard_status', must be one of '%s'",
                    $standard_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        if (!is_null($standard_status) && (mb_strlen($standard_status) > 100)) {
            throw new \InvalidArgumentException('invalid length for $standard_status when calling Listing., must be smaller than or equal to 100.');
        }
        if (!is_null($standard_status) && (mb_strlen($standard_status) < 1)) {
            throw new \InvalidArgumentException('invalid length for $standard_status when calling Listing., must be bigger than or equal to 1.');
        }

        $this->container['standard_status'] = $standard_status;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description of the selling points of the building and/or land for sale.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 65535)) {
            throw new \InvalidArgumentException('invalid length for $description when calling Listing., must be smaller than or equal to 65535.');
        }
        if (!is_null($description) && (mb_strlen($description) < 1)) {
            throw new \InvalidArgumentException('invalid length for $description when calling Listing., must be bigger than or equal to 1.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets lot
     *
     * @return \Aryeo\Model\ListingLot|null
     */
    public function getLot()
    {
        return $this->container['lot'];
    }

    /**
     * Sets lot
     *
     * @param \Aryeo\Model\ListingLot|null $lot lot
     *
     * @return self
     */
    public function setLot($lot)
    {
        $this->container['lot'] = $lot;

        return $this;
    }

    /**
     * Gets building
     *
     * @return \Aryeo\Model\ListingBuilding|null
     */
    public function getBuilding()
    {
        return $this->container['building'];
    }

    /**
     * Sets building
     *
     * @param \Aryeo\Model\ListingBuilding|null $building building
     *
     * @return self
     */
    public function setBuilding($building)
    {
        $this->container['building'] = $building;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \Aryeo\Model\ListingPrice|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \Aryeo\Model\ListingPrice|null $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets list_agent
     *
     * @return \Aryeo\Model\Group|null
     */
    public function getListAgent()
    {
        return $this->container['list_agent'];
    }

    /**
     * Sets list_agent
     *
     * @param \Aryeo\Model\Group|null $list_agent list_agent
     *
     * @return self
     */
    public function setListAgent($list_agent)
    {
        $this->container['list_agent'] = $list_agent;

        return $this;
    }

    /**
     * Gets co_list_agent
     *
     * @return \Aryeo\Model\Group|null
     */
    public function getCoListAgent()
    {
        return $this->container['co_list_agent'];
    }

    /**
     * Sets co_list_agent
     *
     * @param \Aryeo\Model\Group|null $co_list_agent co_list_agent
     *
     * @return self
     */
    public function setCoListAgent($co_list_agent)
    {
        $this->container['co_list_agent'] = $co_list_agent;

        return $this;
    }

    /**
     * Gets images
     *
     * @return \Aryeo\Model\Image[]|null
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param \Aryeo\Model\Image[]|null $images images
     *
     * @return self
     */
    public function setImages($images)
    {
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets videos
     *
     * @return \Aryeo\Model\Video[]|null
     */
    public function getVideos()
    {
        return $this->container['videos'];
    }

    /**
     * Sets videos
     *
     * @param \Aryeo\Model\Video[]|null $videos videos
     *
     * @return self
     */
    public function setVideos($videos)
    {
        $this->container['videos'] = $videos;

        return $this;
    }

    /**
     * Gets floor_plans
     *
     * @return \Aryeo\Model\FloorPlan[]|null
     */
    public function getFloorPlans()
    {
        return $this->container['floor_plans'];
    }

    /**
     * Sets floor_plans
     *
     * @param \Aryeo\Model\FloorPlan[]|null $floor_plans floor_plans
     *
     * @return self
     */
    public function setFloorPlans($floor_plans)
    {
        $this->container['floor_plans'] = $floor_plans;

        return $this;
    }

    /**
     * Gets interactive_content
     *
     * @return \Aryeo\Model\InteractiveContent[]|null
     */
    public function getInteractiveContent()
    {
        return $this->container['interactive_content'];
    }

    /**
     * Sets interactive_content
     *
     * @param \Aryeo\Model\InteractiveContent[]|null $interactive_content interactive_content
     *
     * @return self
     */
    public function setInteractiveContent($interactive_content)
    {
        $this->container['interactive_content'] = $interactive_content;

        return $this;
    }

    /**
     * Gets property_website
     *
     * @return \Aryeo\Model\PropertyWebsite|null
     */
    public function getPropertyWebsite()
    {
        return $this->container['property_website'];
    }

    /**
     * Sets property_website
     *
     * @param \Aryeo\Model\PropertyWebsite|null $property_website property_website
     *
     * @return self
     */
    public function setPropertyWebsite($property_website)
    {
        $this->container['property_website'] = $property_website;

        return $this;
    }

    /**
     * Gets orders
     *
     * @return \Aryeo\Model\Order[]|null
     */
    public function getOrders()
    {
        return $this->container['orders'];
    }

    /**
     * Sets orders
     *
     * @param \Aryeo\Model\Order[]|null $orders orders
     *
     * @return self
     */
    public function setOrders($orders)
    {
        $this->container['orders'] = $orders;

        return $this;
    }

    /**
     * Gets downloads_enabled
     *
     * @return bool
     */
    public function getDownloadsEnabled()
    {
        return $this->container['downloads_enabled'];
    }

    /**
     * Sets downloads_enabled
     *
     * @param bool $downloads_enabled Are downloads enabled for this listing?
     *
     * @return self
     */
    public function setDownloadsEnabled($downloads_enabled)
    {
        $this->container['downloads_enabled'] = $downloads_enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


